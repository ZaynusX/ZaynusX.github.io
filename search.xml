<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2025ACM练题记录1~10</title>
      <link href="/2025/02/15/2025ACM%E7%BB%83%E9%A2%98%E8%AE%B0%E5%BD%951-10/"/>
      <url>/2025/02/15/2025ACM%E7%BB%83%E9%A2%98%E8%AE%B0%E5%BD%951-10/</url>
      
        <content type="html"><![CDATA[<h1 id="01-班级活动"><a href="#01-班级活动" class="headerlink" title="01 班级活动"></a>01 班级活动</h1><p>题目来源：蓝桥杯真题<br>做题时间：250201<br>解题用时：1h44min</p><p>![[Pasted image 20250201191646.png]]</p><p>题目标签： 2023，思维，国赛</p><h4 id="题意整理："><a href="#题意整理：" class="headerlink" title="题意整理："></a>题意整理：</h4><p>输入n个整数，每个整数的范围是1~n，现修改整数的值，使其两两相等（n为偶数，&gt;&#x3D;2个数相等的情况不存在），问最少修改次数。[[map的用法]]</p><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>统计每个数出现的次数，若次数为1，则可以与同为1 的另一个数相互配对，或者与&gt;&#x3D;2的数相互配对，要分别统计count1和count3（&gt;&#x3D;2总量）</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> count1=<span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> count3=<span class="number">0</span>;</span><br><span class="line">  cin&gt;&gt;n;</span><br><span class="line">  map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;myMap;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    cin&gt;&gt;temp;</span><br><span class="line">    myMap[temp]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(myMap[i]&lt;<span class="number">2</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(myMap[i]==<span class="number">1</span>)count1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      count3+=myMap[i]<span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(count1&lt;=count3)count=count3;</span><br><span class="line">  <span class="keyword">else</span> count=(count1+count3)/<span class="number">2</span>;</span><br><span class="line">  cout&lt;&lt;count;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="02-好数"><a href="#02-好数" class="headerlink" title="02 好数"></a>02 好数</h1><p>解题日期：250201<br>解题用时：66min<br>题目来源：蓝桥杯 省赛真题<br>题目难度：简单<br>题目标签：暴力，枚举，省赛，2024</p><h4 id="题意整理"><a href="#题意整理" class="headerlink" title="题意整理"></a>题意整理</h4><p>如图所示，比较清楚了。<br>![[Pasted image 20250201203855.png]]</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>数据范围不是很大，可以直接暴力枚举。<br>（原先往错误的方向思考了很久，一直想要通过构造的方法来解决，复杂性较高，需要额外的约束和管理）<br>暴力枚举写了大概不到十分钟，加上调试的时间是14min。</p><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> N;</span><br><span class="line">  cin&gt;&gt;N;</span><br><span class="line">  <span class="type">int</span> countsum=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> n=i;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      count++;</span><br><span class="line">      temp=n%<span class="number">10</span>;</span><br><span class="line">      n/=<span class="number">10</span>;</span><br><span class="line">      <span class="type">int</span> a=count%<span class="number">2</span>;</span><br><span class="line">      <span class="type">int</span> b=temp%<span class="number">2</span>;</span><br><span class="line">      <span class="keyword">if</span>(a!=b)&#123;</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag!=<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      countsum++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;countsum;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="03-回文字符串"><a href="#03-回文字符串" class="headerlink" title="03 回文字符串"></a>03 回文字符串</h1><p>解题日期：250202<br>解题用时：55min<br>题目来源：蓝桥杯省赛真题<br>题目难度：简单<br>题目标签：字符串hash，前缀和，省赛，2024</p><h4 id="题意整理-1"><a href="#题意整理-1" class="headerlink" title="题意整理"></a>题意整理</h4><p>![[Pasted image 20250202104542.png]]</p><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>逆向思考，增加即是删，但是不是全部删除再判断是否是回文，有漏洞bablab，要删除一个判断一个</p><h4 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断字符串是否是回文</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[left] != s[right]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">  string s;</span><br><span class="line">  cin&gt;&gt;s;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">isPalindrome</span>(s))</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>((!s.<span class="built_in">empty</span>())&amp;&amp;(s.<span class="built_in">back</span>()==<span class="string">&#x27;l&#x27;</span>||s.<span class="built_in">back</span>()==<span class="string">&#x27;q&#x27;</span>||s.<span class="built_in">back</span>()==<span class="string">&#x27;b&#x27;</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    s.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isPalindrome</span>(s))&#123;</span><br><span class="line">      cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="04-纯职业小组"><a href="#04-纯职业小组" class="headerlink" title="04 纯职业小组"></a>04 纯职业小组</h1><p>解题日期：250203<br>解题用时：-min<br>题目来源：蓝桥杯真题 省赛<br>题目难度：困难<br>题目标签：思维，省赛，2024</p><h4 id="题意整理-2"><a href="#题意整理-2" class="headerlink" title="题意整理"></a>题意整理</h4><p>![[Pasted image 20250203194701.png]]</p><h4 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//题意就是说找一些人,且刚好能凑成k队(所以需要考虑最坏的情况,就是都找一些不能凑成一队的人)(题意表述不太清晰)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long<span class="comment">//思路:先拿走少于3的队伍的人数</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">//再在大于3个人的队伍中拿走尽可能多的人数,剩下的人数再存起来;比如有两个队(6,4),如果需要拿走两个队,就在6中拿走5个人,4中拿走2个人,意思就是尽可能拿走一个队伍再余2个人</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+10</span>;<span class="comment">//最后如果队伍数还凑不够的话,再从剩下的人数中拿,每拿一个人队伍数就会加一</span></span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n,k,m=<span class="number">0</span>;</span><br><span class="line">  cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">  map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp,book;<span class="comment">//因为x最大1e9,所以不能用数组存</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    <span class="keyword">if</span>(!book[x])<span class="comment">//防止职业重复存</span></span><br><span class="line">    &#123;</span><br><span class="line">      book[x]=<span class="number">1</span>;</span><br><span class="line">      a[++m]=x;<span class="comment">//用数组记录下职业</span></span><br><span class="line">    &#125;</span><br><span class="line">    mp[x]+=y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(mp[a[i]]&gt;=<span class="number">3</span>)</span><br><span class="line">    cnt+=mp[a[i]]/<span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(cnt&lt;k)<span class="comment">//算算够不够凑成k队</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;&gt;q,qq,qqq;<span class="comment">//从大到小排序</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    q.<span class="built_in">push</span>(mp[a[i]]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">auto</span> x=q.<span class="built_in">top</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">3</span>)<span class="comment">//将比3大的存起来进行计算</span></span><br><span class="line">    qq.<span class="built_in">push</span>(x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    ans+=x;<span class="comment">//比3小的直接加起来,因为他们不可能组成一个队(题意说3个相同的职业才能组成一个队)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(qq.<span class="built_in">size</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">auto</span> x=qq.<span class="built_in">top</span>();</span><br><span class="line">    qq.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="type">int</span> kk=(x<span class="number">+1</span>)/<span class="number">3</span><span class="number">-1</span>;<span class="comment">//这里意思是比如说一个队6个人(或7个人,8个人),想只凑成一队,最多可以拿5个人;x+1是考虑到一个队5个人,要凑成一队可以直接拿走5个人,如果不加一,就会拿走2个人</span></span><br><span class="line">    <span class="type">int</span> t=<span class="built_in">min</span>(kk,k<span class="number">-1</span>);<span class="comment">//这里k-1意思是空一个队伍,方便以后还有大于3人的队伍取不到(剩下的队伍都还能取2个,增添一下人数),要不后面k=0直接退出循环了</span></span><br><span class="line">   <span class="comment">// int res=t*3;</span></span><br><span class="line">    k-=t;<span class="comment">//队伍数减去t</span></span><br><span class="line">    ans+=(t*<span class="number">3</span><span class="number">+2</span>);<span class="comment">//尽量每次多取两个,人数最大化</span></span><br><span class="line">    x-=(t*<span class="number">3</span><span class="number">+2</span>);</span><br><span class="line">    <span class="keyword">if</span>(x)</span><br><span class="line">    qqq.<span class="built_in">push</span>(x);<span class="comment">//把剩下的人单独拿出来</span></span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(qqq.<span class="built_in">size</span>())<span class="comment">//这里放着的都是从大于3个的中拿剩下的,在这里随便拿一个,就会使队伍数量加一</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">auto</span> x=qqq.<span class="built_in">top</span>();</span><br><span class="line">    qqq.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">   <span class="comment">// int t=min(k,x);</span></span><br><span class="line">   <span class="comment">// cout&lt;&lt;k&lt;&lt;&quot; &quot;&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;t&lt;&lt;&#x27;\n&#x27;;</span></span><br><span class="line">    ans++;<span class="comment">//假如本来有4个,存到这里时变成了2个,但是你只能取一个,不能2个都取走(2个都取走会不符合题意)(下面样例自己带入一下可能会清楚一些)</span></span><br><span class="line">    k--;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">比如样例:</span></span><br><span class="line"><span class="comment">3 3</span></span><br><span class="line"><span class="comment">1 4</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//快输</span></span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">  cin&gt;&gt;T;</span><br><span class="line">  <span class="keyword">while</span>(T--)</span><br><span class="line">  <span class="built_in">solve</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你的代码核心思想是 <strong>尽量选择合适的士兵，使其能刚好组成 <code>k</code> 个纯职业小组</strong>。我们从 <strong>最坏的情况</strong> 出发，考虑如何选择士兵，确保 <code>k</code> 个小组可以被组成。下面详细解析代码的逻辑和思路：</p><hr><h2 id="1-题目分析"><a href="#1-题目分析" class="headerlink" title="1. 题目分析"></a><strong>1. 题目分析</strong></h2><ul><li>每个小队由相同职业的士兵组成。</li><li>目标是至少选 <code>k</code> 个士兵队伍，每个队伍至少由 <strong>3 个相同职业的士兵</strong> 组成。</li><li><strong>最坏情况</strong> 下，可能会遇到一些士兵无法凑满 3 人的小组，这会影响队伍数量。</li><li>我们需要找到 <strong>最少的士兵人数</strong> 来确保 <code>k</code> 个小组可以组建成功。</li></ul><hr><h2 id="2-代码逻辑分析"><a href="#2-代码逻辑分析" class="headerlink" title="2. 代码逻辑分析"></a><strong>2. 代码逻辑分析</strong></h2><h3 id="1-读取输入-统计每种职业的士兵数量"><a href="#1-读取输入-统计每种职业的士兵数量" class="headerlink" title="(1) 读取输入 &amp; 统计每种职业的士兵数量"></a><strong>(1) 读取输入 &amp; 统计每种职业的士兵数量</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, k, m = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp, book;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y;  <span class="comment">// x: 职业，y: 该职业的士兵数量</span></span><br><span class="line">    <span class="keyword">if</span> (!book[x]) &#123; <span class="comment">// 防止重复存储相同职业</span></span><br><span class="line">        book[x] = <span class="number">1</span>;</span><br><span class="line">        a[++m] = x; <span class="comment">// 记录职业种类</span></span><br><span class="line">    &#125;</span><br><span class="line">    mp[x] += y; <span class="comment">// 统计每个职业的士兵总数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><ul><li><code>mp[x]</code> 记录 <strong>职业 <code>x</code> 的士兵总数</strong>。</li><li><code>book[x]</code> 避免 <strong>重复统计相同职业</strong>，因为可能存在多个小队有相同职业。</li><li><code>a[]</code> 记录 <strong>所有不同职业的编号</strong>。</li></ul><hr><h3 id="2-计算能完整组成-k-组的职业数"><a href="#2-计算能完整组成-k-组的职业数" class="headerlink" title="(2) 计算能完整组成 k 组的职业数"></a><strong>(2) 计算能完整组成 <code>k</code> 组的职业数</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (mp[a[i]] &gt;= <span class="number">3</span>)</span><br><span class="line">        cnt += mp[a[i]] / <span class="number">3</span>; <span class="comment">// 每 3 人可以组成 1 队</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt &lt; k) &#123; <span class="comment">// 如果连 k 组都凑不出来，直接输出 -1</span></span><br><span class="line">    cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><ul><li>计算所有职业 <strong>能组成多少完整的小队</strong>，即 <code>cnt</code>。</li><li>如果 <code>cnt &lt; k</code>，表示无论如何 <strong>都无法组成 <code>k</code> 组</strong>，直接输出 <code>-1</code>。</li></ul><hr><h3 id="3-按照职业的士兵数量进行分类"><a href="#3-按照职业的士兵数量进行分类" class="headerlink" title="(3) 按照职业的士兵数量进行分类"></a><strong>(3) 按照职业的士兵数量进行分类</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; q, qq, qqq;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    q.<span class="built_in">push</span>(mp[a[i]]); <span class="comment">// 大顶堆，优先选择士兵最多的职业</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><ul><li>使用 <strong>优先队列（大顶堆）</strong>，保证 <strong>尽可能先从士兵多的职业选取</strong>。</li></ul><hr><h3 id="4-处理士兵数量小于-3-的情况"><a href="#4-处理士兵数量小于-3-的情况" class="headerlink" title="(4) 处理士兵数量小于 3 的情况"></a><strong>(4) 处理士兵数量小于 3 的情况</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">    <span class="keyword">auto</span> x = q.<span class="built_in">top</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">3</span>)</span><br><span class="line">        qq.<span class="built_in">push</span>(x);  <span class="comment">// 将数量 ≥3 的放入新的堆</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans += x;    <span class="comment">// 数量小于 3 的，直接累加到最终答案</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><ul><li><strong>数量小于 3</strong> 的士兵 <strong>不能组成小组</strong>，所以他们的数量直接累加。</li><li><strong>数量大于等于 3</strong> 的士兵 <strong>可以尝试组成小组</strong>，存入 <code>qq</code>。</li></ul><hr><h3 id="5-处理士兵数量-3-的情况"><a href="#5-处理士兵数量-3-的情况" class="headerlink" title="(5) 处理士兵数量 &gt;=3 的情况"></a><strong>(5) 处理士兵数量 <code>&gt;=3</code> 的情况</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (qq.<span class="built_in">size</span>()) &#123;</span><br><span class="line">    <span class="keyword">auto</span> x = qq.<span class="built_in">top</span>();</span><br><span class="line">    qq.<span class="built_in">pop</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> kk = (x + <span class="number">1</span>) / <span class="number">3</span> - <span class="number">1</span>; <span class="comment">// 计算最多可以拿走多少人</span></span><br><span class="line">    <span class="type">int</span> t = <span class="built_in">min</span>(kk, k - <span class="number">1</span>);  <span class="comment">// 不能超过剩余需要的小组数（k-1）</span></span><br><span class="line">    </span><br><span class="line">    k -= t;  <span class="comment">// 剩余需要的小组数减少 t</span></span><br><span class="line">    ans += (t * <span class="number">3</span> + <span class="number">2</span>); <span class="comment">// 每次尽量多取 3 人，同时多加 2 人</span></span><br><span class="line">    </span><br><span class="line">    x -= (t * <span class="number">3</span> + <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (x) qqq.<span class="built_in">push</span>(x); <span class="comment">// 还剩下的人存入另一个队列</span></span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><ul><li><strong>优先从大于 3 人的职业中拿走尽可能多的士兵</strong>，确保先组 <code>k-1</code> 个队伍。</li><li><code>kk = (x+1)/3 -1</code>：<ul><li>计算该职业可以 <strong>优先组出几个队伍</strong>，留下 2 个士兵。</li></ul></li><li><code>t = min(kk, k-1)</code>：<ul><li>不能超过剩余需要的小组数 (<code>k-1</code>)，否则有浪费。</li></ul></li><li><code>ans += (t * 3 + 2)</code>：<ul><li>选 <code>t</code> 组小队，每组 <code>3</code> 人，同时多选 <code>2</code> 人。</li></ul></li><li><strong>剩余士兵数量 <code>x</code> 仍然大于 0，放入 <code>qqq</code> 队列</strong>，等待后续分配。</li></ul><hr><h3 id="6-处理剩余士兵"><a href="#6-处理剩余士兵" class="headerlink" title="(6) 处理剩余士兵"></a><strong>(6) 处理剩余士兵</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (qqq.<span class="built_in">size</span>()) &#123;</span><br><span class="line">    <span class="keyword">auto</span> x = qqq.<span class="built_in">top</span>();</span><br><span class="line">    qqq.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    ans++;  <span class="comment">// 每次选一个士兵</span></span><br><span class="line">    k--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><ul><li><strong><code>qqq</code> 队列中的士兵是之前剩余的</strong>，这里 <strong>每选 1 个士兵，就增加 1 组</strong>。</li><li>直到 <strong><code>k==0</code> 时，说明 <code>k</code> 组小队已经全部组好</strong>，停止。</li></ul><hr><h2 id="3-复杂度分析"><a href="#3-复杂度分析" class="headerlink" title="3. 复杂度分析"></a><strong>3. 复杂度分析</strong></h2><ul><li><strong>读取输入：</strong> <code>O(n)</code></li><li><strong>统计职业人数：</strong> <code>O(n)</code></li><li><strong>排序（堆操作）：</strong> <code>O(n log n)</code></li><li><strong>总时间复杂度：</strong> <code>O(n log n)</code></li></ul><hr><h2 id="4-代码总结"><a href="#4-代码总结" class="headerlink" title="4. 代码总结"></a><strong>4. 代码总结</strong></h2><ul><li><strong>首先统计各个职业的士兵数量。</strong></li><li><strong>先处理不足 3 人的职业士兵，他们无法组成队伍，因此直接计算进 <code>ans</code>。</strong></li><li><strong>优先选择士兵数量最多的职业，尽可能组成 <code>k-1</code> 个完整的小队。</strong></li><li><strong>若仍不足 <code>k</code> 个队伍，就从剩余士兵中一个个拿，直到满足 <code>k</code> 个小队的需求。</strong></li><li><strong>最终输出最少的士兵数量 <code>ans</code>。</strong></li></ul><hr><h2 id="5-示例分析"><a href="#5-示例分析" class="headerlink" title="5. 示例分析"></a><strong>5. 示例分析</strong></h2><p><strong>输入：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3 3</span><br><span class="line">1 4</span><br><span class="line">2 4</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><ol><li>统计士兵数量：<ul><li><code>职业 1: 4 人</code></li><li><code>职业 2: 4 人</code></li><li><code>职业 3: 4 人</code></li></ul></li><li>优先拿 <code>4 人</code> 的职业，每次取 <code>3+2=5</code>，保证 <code>k=3</code> 的小组数。</li><li>最终选择的士兵数：**<code>6</code>**。</li></ol><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><hr><h2 id="6-结论"><a href="#6-结论" class="headerlink" title="6. 结论"></a><strong>6. 结论</strong></h2><ul><li>代码通过 <strong>优先队列+贪心策略</strong>，确保选出的士兵 <strong>刚好满足 <code>k</code> 组的需求</strong>，并且 <strong>士兵数量最少</strong>。</li><li>题目关键点在于：<ol><li><strong>处理不能组成 3 人小队的士兵</strong>。</li><li><strong>优先从士兵数量最多的职业中选人</strong>。</li><li><strong>剩余士兵尽可能高效利用，凑成 <code>k</code> 组</strong>。</li></ol></li></ul><p>这道题涉及 <strong>贪心+优先队列</strong>，是一个比较好的算法练习题！🎯</p><hr><h1 id="05-奇怪的捐赠"><a href="#05-奇怪的捐赠" class="headerlink" title="05 奇怪的捐赠"></a>05 奇怪的捐赠</h1><p>解题日期：250204<br>解题用时：15min<br>题目来源：蓝桥杯真题<br>题目难度：简单<br>题目标签：填空题</p><h4 id="题意整理-3"><a href="#题意整理-3" class="headerlink" title="题意整理"></a>题意整理</h4><p>![[Pasted image 20250204193727.png]]</p><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>转换为7进制，每一位相加即可</p><h4 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> x=<span class="number">1000000</span>;</span><br><span class="line">  <span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(x&gt;<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    temp=x%<span class="number">7</span>;</span><br><span class="line">    res+=temp;</span><br><span class="line">    x/=<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;res;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="06-握手问题"><a href="#06-握手问题" class="headerlink" title="06 握手问题"></a>06 握手问题</h1><p>解题日期：250204<br>解题用时：5min<br>题目来源：蓝桥杯真题<br>题目难度：简单<br>题目标签：省赛，数学，2024</p><h4 id="题意整理-4"><a href="#题意整理-4" class="headerlink" title="题意整理"></a>题意整理</h4><p>![[Pasted image 20250204194959.png]]</p><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>排列组合，两两相减即可</p><h4 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> temp1=<span class="number">50</span>*<span class="number">49</span>/<span class="number">2</span>;</span><br><span class="line">  <span class="type">int</span> temp2=<span class="number">7</span>*<span class="number">6</span>/<span class="number">2</span>;</span><br><span class="line">  <span class="type">int</span> res=temp1-temp2;</span><br><span class="line">  cout&lt;&lt;res;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="07-最大区间"><a href="#07-最大区间" class="headerlink" title="07 最大区间"></a>07 最大区间</h1><p>解题日期：250204<br>解题用时：-min<br>题目来源：蓝桥杯真题<br>题目难度：中等<br>题目标签：2023，单调栈，国赛[[单调栈]]</p><h4 id="题意整理-5"><a href="#题意整理-5" class="headerlink" title="题意整理"></a>题意整理</h4><p>![[Pasted image 20250204203247.png]]</p><h4 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> il inline</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> ull = <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll N = <span class="number">1e5</span> + <span class="number">5</span>, mod = <span class="number">998244353</span>, inf = <span class="number">2e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n,top=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    vector&lt;ll&gt;<span class="built_in">a</span>(n<span class="number">+5</span>),<span class="built_in">stak</span>(n<span class="number">+5</span>),<span class="built_in">dpl</span>(n<span class="number">+5</span>),<span class="built_in">dpr</span>(n<span class="number">+5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(top&amp;&amp;a[stak[top]]&gt;=a[i])top--;</span><br><span class="line">        dpl[i]=stak[top];</span><br><span class="line">        <span class="comment">//cout&lt;&lt;dpl[i]&lt;&lt;&quot; \n&quot;[i==n];</span></span><br><span class="line">        stak[++top]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    top=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(top&amp;&amp;a[stak[top]]&gt;=a[i])top--;</span><br><span class="line">        dpr[i]=stak[top];</span><br><span class="line">        <span class="comment">//cout&lt;&lt;dpr[i]&lt;&lt;&quot; \n&quot;[i==1];</span></span><br><span class="line">        stak[++top]=i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,(dpr[i]-dpl[i]<span class="number">-1</span>)*a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cin &gt;&gt; t;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码是解决了一个典型的“区间最小值问题”的题目。具体来说，它通过使用<strong>单调栈</strong>来计算每个元素在其左侧和右侧的第一个小于自己的元素的位置，利用这些信息来推导出每个元素在区间中的最大贡献值。</p><h3 id="解题思路分析："><a href="#解题思路分析：" class="headerlink" title="解题思路分析："></a>解题思路分析：</h3><ol><li><p><strong>问题描述简化</strong>：</p><ul><li>给定一个数组 <code>a[]</code>，要求在每个位置 <code>i</code> 上找出一个区间 <code>[l, r]</code>，使得 <code>a[i]</code> 是该区间的最小值，并且要找出这个区间的面积。</li><li>这个面积即为 <code>(r - l - 1) * a[i]</code>，其中 <code>l</code> 是区间的左端点，<code>r</code> 是区间的右端点。</li></ul></li><li><p><strong>单调栈的应用</strong>：</p><ul><li><strong>左侧第一个小于自己的数</strong>：<ul><li>通过栈从左到右遍历数组，维护一个栈，栈内的元素是数组索引，栈内的元素是单调递增的（即栈内元素对应的 <code>a[]</code> 值递增）。这样每次遇到一个比栈顶元素小的数，就可以确定当前数的左边第一个比它小的数的位置。</li></ul></li><li><strong>右侧第一个小于自己的数</strong>：<ul><li>通过栈从右到左遍历数组，操作方式与左侧相似，栈内保持单调递增。遍历时，每次遇到比栈顶元素小的数，可以确定当前数的右边第一个比它小的数的位置。</li></ul></li></ul></li><li><p><strong>详细步骤</strong>：</p><ul><li><strong>计算左边第一个小于自己的数</strong>（<code>dpl[]</code>）：<ul><li>维护一个栈 <code>stak</code>，遍历数组 <code>a[]</code>，如果当前栈顶元素比 <code>a[i]</code> 大，则弹出栈顶元素。这样栈顶的元素就是左侧第一个比 <code>a[i]</code> 小的元素的下标。记录这个下标为 <code>dpl[i]</code>，表示左侧第一个小于 <code>a[i]</code> 的位置。</li></ul></li><li><strong>计算右边第一个小于自己的数</strong>（<code>dpr[]</code>）：<ul><li>从右向左遍历数组，和左边的操作类似，维护一个栈 <code>stak</code>，找到每个元素右侧第一个小于自己的数的下标，记录在 <code>dpr[i]</code> 中。</li></ul></li><li><strong>计算面积</strong>：<ul><li>对于每个位置 <code>i</code>，其能够代表最小值的区间范围是从 <code>dpl[i] + 1</code> 到 <code>dpr[i] - 1</code>，因此它的贡献值（即面积）为 <code>(dpr[i] - dpl[i] - 1) * a[i]</code>。遍历所有位置，找到最大的贡献值即为最终答案。</li></ul></li></ul></li><li><p><strong>时间复杂度分析</strong>：</p><ul><li>单调栈的操作每个元素入栈和出栈最多一次，因此时间复杂度是 <code>O(n)</code>，整个过程遍历两遍数组（一次从左到右，另一次从右到左），所以总时间复杂度是 <code>O(n)</code>，效率较高。</li></ul></li></ol><h3 id="代码关键部分："><a href="#代码关键部分：" class="headerlink" title="代码关键部分："></a>代码关键部分：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">while</span>(top &amp;&amp; a[stak[top]] &gt;= a[i]) top--; <span class="comment">// 保持栈是单调递增的</span></span><br><span class="line">    dpl[i] = stak[top]; <span class="comment">// 栈顶元素就是左边第一个小于 a[i] 的下标</span></span><br><span class="line">    stak[++top] = i; <span class="comment">// 将当前元素的索引压栈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">    <span class="keyword">while</span>(top &amp;&amp; a[stak[top]] &gt;= a[i]) top--; <span class="comment">// 保持栈是单调递增的</span></span><br><span class="line">    dpr[i] = stak[top]; <span class="comment">// 栈顶元素就是右边第一个小于 a[i] 的下标</span></span><br><span class="line">    stak[++top] = i; <span class="comment">// 将当前元素的索引压栈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    ans = <span class="built_in">max</span>(ans, (dpr[i] - dpl[i] - <span class="number">1</span>) * a[i]); <span class="comment">// 计算最大面积</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li><strong>核心思想</strong>：通过单调栈分别计算每个位置的左边和右边第一个小于它的数的位置，结合这些位置可以计算每个数作为最小值的最大区间面积，最终取最大值。</li><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是数组长度。</li></ul><hr><h1 id="08-模拟"><a href="#08-模拟" class="headerlink" title="08 模拟"></a>08 模拟</h1><p>解题日期：250204<br>解题用时：5min<br>题目来源：蓝桥杯真题<br>题目难度：中等<br>题目标签：2022，模拟</p><h4 id="题意整理-6"><a href="#题意整理-6" class="headerlink" title="题意整理"></a>题意整理</h4><h2 id="Pasted-image-20250204224451-png-解题思路直接模拟即可-AC代码"><a href="#Pasted-image-20250204224451-png-解题思路直接模拟即可-AC代码" class="headerlink" title="![[Pasted image 20250204224451.png]]#### 解题思路直接模拟即可#### AC代码"></a>![[Pasted image 20250204224451.png]]<br>#### 解题思路<br>直接模拟即可<br>#### AC代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string s;</span><br><span class="line">  cin&gt;&gt;s;</span><br><span class="line">  <span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> y=<span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> n=s.<span class="built_in">length</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(s[i]==<span class="string">&#x27;U&#x27;</span>)x-=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(s[i]==<span class="string">&#x27;D&#x27;</span>)x+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(s[i]==<span class="string">&#x27;L&#x27;</span>)y-=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(s[i]==<span class="string">&#x27;R&#x27;</span>)y+=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;y;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></h2><h1 id="09-天干地支"><a href="#09-天干地支" class="headerlink" title="09 天干地支"></a>09 天干地支</h1><p>解题日期：250204<br>解题用时：7min<br>题目来源：蓝桥杯真题<br>题目难度：中等<br>题目标签：2020，模拟，国赛</p><h4 id="题意整理-7"><a href="#题意整理-7" class="headerlink" title="题意整理"></a>题意整理</h4><p>![[Pasted image 20250205092750.png]]</p><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>简单计算，注意x-2020可能&lt;0</p><h4 id="AC代码-6"><a href="#AC代码-6" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin&gt;&gt;n;</span><br><span class="line">  <span class="type">int</span> count=(n<span class="number">-2020</span><span class="number">+6000</span>)%<span class="number">60</span>;</span><br><span class="line">  <span class="type">int</span> counttg=count%<span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> countdz=count%<span class="number">12</span>;</span><br><span class="line">  string tg;</span><br><span class="line">  string dz;</span><br><span class="line">  <span class="keyword">if</span>(counttg==<span class="number">0</span>)tg=<span class="string">&quot;geng&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(counttg==<span class="number">1</span>)tg=<span class="string">&quot;xin&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(counttg==<span class="number">2</span>)tg=<span class="string">&quot;ren&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(counttg==<span class="number">3</span>)tg=<span class="string">&quot;gui&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(counttg==<span class="number">4</span>)tg=<span class="string">&quot;jia&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(counttg==<span class="number">5</span>)tg=<span class="string">&quot;yi&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(counttg==<span class="number">6</span>)tg=<span class="string">&quot;bing&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(counttg==<span class="number">7</span>)tg=<span class="string">&quot;ding&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(counttg==<span class="number">8</span>)tg=<span class="string">&quot;wu&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(counttg==<span class="number">9</span>)tg=<span class="string">&quot;ji&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">0</span>)dz=<span class="string">&quot;zi&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">1</span>)dz=<span class="string">&quot;chou&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">2</span>)dz=<span class="string">&quot;yin&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">3</span>)dz=<span class="string">&quot;mao&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">4</span>)dz=<span class="string">&quot;chen&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">5</span>)dz=<span class="string">&quot;si&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">6</span>)dz=<span class="string">&quot;wu&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">7</span>)dz=<span class="string">&quot;wei&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">8</span>)dz=<span class="string">&quot;shen&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">9</span>)dz=<span class="string">&quot;you&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">10</span>)dz=<span class="string">&quot;xu&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">11</span>)dz=<span class="string">&quot;hai&quot;</span>;</span><br><span class="line"></span><br><span class="line">  cout&lt;&lt;tg&lt;&lt;dz;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="10-答疑"><a href="#10-答疑" class="headerlink" title="10 答疑"></a>10 答疑</h1><p>解题日期：250205<br>解题用时：230min<br>题目来源：蓝桥杯真题<br>题目难度：中等<br>题目标签：2020，贪心，国赛</p><h4 id="题意整理-8"><a href="#题意整理-8" class="headerlink" title="题意整理"></a>题意整理</h4><p>![[Pasted image 20250205203805.png]]</p><h4 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h4><p><strong>同学消耗的总时间越短，优先级越高</strong><br><strong>总时间相等时，优先级相同，无所谓前后</strong><br><strong>证明：</strong><br>假设同学 i 进入办公室的时间于解答时间的和为 Ai , 离开办公室的时间为 Bi<br>对于同学 1 与同学 2 而言，所用时间为：<br>A1, B1<br>A2, B2<br>若同学 1 先进教室，则答案为 ans1 &#x3D; (A1) + (A1 + B1 + A2)<br>若同学 2 先进教室，则答案为 ans2 &#x3D; (A2) + (A2 + B2 + A1)<br>可以发现 ans1 与 ans2 的关系等同于 (A1 + B1) 与 (A2 + B2) 的关系<br>所以：每名同学进入教室的优先级只与其所消耗的时间和有关，和越小，优先级越高</p><p>假如 (A1 + B1) &#x3D;&#x3D; (A2 + B2)<br>此时有同学 3 所用时间为：A3, B3 且 (A3 + B3) &gt; (A2 + B2)<br>那么同学 3 发消息的时刻为 (A1 + B1 + A2 + B2 + A3)<br>可知，同学 1 与同学 2 的顺序不会影响答案</p><h4 id="AC代码-7"><a href="#AC代码-7" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Num</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> s;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> a;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> e;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于排序的比较函数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> Num&amp; x, <span class="type">const</span> Num&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.sum &lt; y.sum;  <span class="comment">// 按照 sum 从小到大排序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);  <span class="comment">// 优化 I/O</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    Num num[<span class="number">1010</span>];  <span class="comment">// 使用结构体数组</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输入数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; num[i].s &gt;&gt; num[i].a &gt;&gt; num[i].e;</span><br><span class="line">        num[i].sum = num[i].s + num[i].a + num[i].e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按照 sum 从小到大排序</span></span><br><span class="line">    <span class="built_in">sort</span>(num, num + n, compare);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算结果</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        res+=num[i].a+num[i].s;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">      k+=num[i].sum;</span><br><span class="line">      res+=k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理最后一个元素</span></span><br><span class="line">    res += num[n - <span class="number">1</span>].sum - num[n - <span class="number">1</span>].e;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024-02-12-部署到远程服务器的烦恼</title>
      <link href="/2025/02/12/2024-02-12-%E9%83%A8%E7%BD%B2%E5%88%B0%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E7%83%A6%E6%81%BC/"/>
      <url>/2025/02/12/2024-02-12-%E9%83%A8%E7%BD%B2%E5%88%B0%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E7%83%A6%E6%81%BC/</url>
      
        <content type="html"><![CDATA[<p>正在疯狂想要一个既有GitHub，又可以方便的本地同步，还可以用上我的云服务器的方法。<br>虽然说是静态网站不那么苛求同步的速度，但是每一次要手动重复自己之前的操作还是有点伤脑筋的。那些优秀的程序员们想必是不会采用这么低效的方法的。<br>这个博客网站还有很多很多需要优化和更改的地方，也有很多我想要实现的功能。希望可以把这里当作我独特的世界，我独特的小家。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Secret</title>
      <link href="/2025/02/12/mimi/"/>
      <url>/2025/02/12/mimi/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="01e192f402e314ecb1de803165cc713598c352b89393f2fc7c50b59d2f7f875d">8857952509ef9895f61625fe2d594ef3b689d4518c7f9cb35f7afd2913fbf3135cb397e4278f78af41d0362fe90210362e40b8e0bb3223f1a720a05917decb6ae58ec7b7be0e926b80a38237fe9ab9a5986411d93499e556d47a0f7ac91504e0fdacce4226b7a89bceededd3d89bf612203e35de90b124958a74b27366d8d696b2541c9ba4458245ab6fc80007d06602a55017687e326f21416d3e9623901979f49c0988cdaa43e250c2d80d6e8e54604327dd9df7e1dee6ff6714484ff33cc4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 作为日记加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2025/02/12/2025-02-12-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2025/02/12/2025-02-12-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第一篇文章"><a href="#这是我的第一篇文章" class="headerlink" title="这是我的第一篇文章"></a>这是我的第一篇文章</h2><p>很高兴拥有自己的个人博客！假期的时间果然是宝贵的，从上周日开始筹备，经过反复试错摸索了三天才出头！<br>希望这次一定要成功！<br>开个好头！<br>域名和SSL证书以及服务器都已经准备好了！<br>投资的金额不是很多，以后有闲钱会加大投入开发更多功能的！</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
