<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2025算法练题记录11~20</title>
      <link href="/2025/02/17/2025%E7%AE%97%E6%B3%95%E7%BB%83%E9%A2%98%E8%AE%B0%E5%BD%9511-20/"/>
      <url>/2025/02/17/2025%E7%AE%97%E6%B3%95%E7%BB%83%E9%A2%98%E8%AE%B0%E5%BD%9511-20/</url>
      
        <content type="html"><![CDATA[<h1 id="11-分球"><a href="#11-分球" class="headerlink" title="11 分球"></a>11 分球</h1><p>解题日期：250206<br>解题用时：34min<br>题目来源：蓝桥云课题库<br>题目难度：简单<br>题目标签：数学，排列组合</p><h4 id="题意整理"><a href="#题意整理" class="headerlink" title="题意整理"></a>题意整理</h4><p>![[Pasted image 20250206162600.png]]</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><h2 id="高中数学排列组合，第一反应隔板法。将n个球和k-1个隔板进行排序，总数为n-k-1-组合数公式为C-m-r-m-r-m-r-此时m-n-k-1-r-k-1-但是后来尝试之后发现这道题目有很多坑。比如整数除法。将res存为double之后，最后不能使用cout输出。一定要使用printf。-AC代码"><a href="#高中数学排列组合，第一反应隔板法。将n个球和k-1个隔板进行排序，总数为n-k-1-组合数公式为C-m-r-m-r-m-r-此时m-n-k-1-r-k-1-但是后来尝试之后发现这道题目有很多坑。比如整数除法。将res存为double之后，最后不能使用cout输出。一定要使用printf。-AC代码" class="headerlink" title="高中数学排列组合，第一反应隔板法。将n个球和k-1个隔板进行排序，总数为n+k-1 组合数公式为C(m,r)&#x3D;m!&#x2F;r!(m-r)! 此时m&#x3D;n+k-1;r&#x3D;k-1;但是后来尝试之后发现这道题目有很多坑。比如整数除法。将res存为double之后，最后不能使用cout输出。一定要使用printf。#### AC代码"></a>高中数学排列组合，第一反应隔板法。<br>将n个球和k-1个隔板进行排序，总数为n+k-1 组合数公式为C(m,r)&#x3D;m!&#x2F;r!(m-r)! 此时m&#x3D;n+k-1;r&#x3D;k-1;<br>但是后来尝试之后发现这道题目有很多坑。比如整数除法。<br>将res存为double之后，最后不能使用cout输出。一定要使用printf。<br>#### AC代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">factor</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> k=n;</span><br><span class="line">  <span class="type">double</span> res=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(k&gt;=<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    res*=k;</span><br><span class="line">    k--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n,k;</span><br><span class="line">  cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">  <span class="type">double</span> res=<span class="built_in">factor</span>(n+k<span class="number">-1</span>)/<span class="built_in">factor</span>(k<span class="number">-1</span>);</span><br><span class="line">  res/=<span class="built_in">factor</span>(n);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%.0f&quot;</span>,res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></h2><h1 id="12-购物车里的宝贝"><a href="#12-购物车里的宝贝" class="headerlink" title="12 购物车里的宝贝"></a>12 购物车里的宝贝</h1><p>解题日期：250215<br>解题用时：9min<br>题目来源：蓝桥题库<br>题目难度：简单<br>题目标签：位运算</p><h4 id="题意整理-1"><a href="#题意整理-1" class="headerlink" title="题意整理"></a>题意整理</h4><p>输入一个整数n，代表集合中元素的数目，现在问集合中的元素能否被划分成两个异或和相等的集合。</p><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>能分成两个异或和相等的集合，即整体集合的异或和等于0.</p><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin&gt;&gt;n;</span><br><span class="line">  <span class="type">int</span> a[<span class="number">100010</span>];</span><br><span class="line">  cin&gt;&gt;a[<span class="number">0</span>];</span><br><span class="line">  <span class="type">int</span> count=a[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">    cin&gt;&gt;a[i];</span><br><span class="line">    count=count^a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;YES&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="13-消灭卡片"><a href="#13-消灭卡片" class="headerlink" title="13 消灭卡片"></a>13 消灭卡片</h1><p>解题日期：250215<br>解题用时：230min<br>题目来源：蓝桥题库<br>题目难度：简单<br>题目标签：思维，数学，算法赛</p><h4 id="题意整理-2"><a href="#题意整理-2" class="headerlink" title="题意整理"></a>题意整理</h4><p>一共t组测试数据。每个测试数据包含n张需要消灭的卡片。每次可以消灭3张或者5张卡片，要用最少的行动次数消灭所有卡片。如果不能消灭则输出-1，如果可以消灭则输出最少次数。</p><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>找规律。0~12注意8和11特例，其他全部n&#x2F;5或者n&#x2F;3即可。12以上的全部都可以表示，按照n%5的结果分成五类，简单计算讨论即可。</p><h4 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">  cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(n&lt;<span class="number">12</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">      count=n/<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">      cout&lt;&lt;count&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">      count=n/<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">      cout&lt;&lt;count&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">5</span>==<span class="number">3</span>)&#123;</span><br><span class="line"></span><br><span class="line">      count=n/<span class="number">5</span><span class="number">+1</span>;</span><br><span class="line"></span><br><span class="line">      cout&lt;&lt;count&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">11</span>)&#123;</span><br><span class="line"></span><br><span class="line">      count=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">      cout&lt;&lt;count&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">      count=n/<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">5</span>==<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">      count=n/<span class="number">5</span><span class="number">+1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">5</span>==<span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line">      count=n/<span class="number">5</span><span class="number">+2</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">5</span>==<span class="number">3</span>)&#123;</span><br><span class="line"></span><br><span class="line">      count=n/<span class="number">5</span><span class="number">+1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">5</span>==<span class="number">4</span>)&#123;</span><br><span class="line"></span><br><span class="line">      count=n/<span class="number">5</span><span class="number">+2</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;count&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> T;</span><br><span class="line"></span><br><span class="line">  cin&gt;&gt;T;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(T--)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="14-k倍区间"><a href="#14-k倍区间" class="headerlink" title="14 k倍区间"></a>14 k倍区间</h1><p>解题日期：250215<br>解题用时：50min<br>题目来源：蓝桥杯真题<br>题目难度：中等<br>题目标签：2017，暴力，省赛。</p><h4 id="题意整理-3"><a href="#题意整理-3" class="headerlink" title="题意整理"></a>题意整理</h4><p>输入n,k，序列长度为n，如果其中一段连续子序列之和为K的倍数，就称这个区间 [ i , j ] 为K倍区间。</p><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>直接暴力三重循环会运行超时，需要优化。<br>原先运行超时的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n,k;</span><br><span class="line">  cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">  <span class="type">int</span> a[<span class="number">100010</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    cin&gt;&gt;a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;n;j++)&#123;</span><br><span class="line">      <span class="type">int</span> cotemp=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> m=i;m&lt;=j;m++)&#123;</span><br><span class="line">        cotemp+=a[m];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(cotemp%k==<span class="number">0</span>)count++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;count;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想一下当两个数除以K的余数相同时，将他们相减之后是不是能被K整除（如：k&#x3D;3,a1&#x3D;4,b&#x3D;7），我们会惊奇的发现是可以的，利用这个技巧，我们可以在求前缀和的时候判断一下这个前缀区间模上K的余数，并计数（cnt[]）,然后再想一下，我们用前缀和求任意一个区间是怎么求得？这样当我们再在判断余数的时候，加上之前也是这个余数的前缀区间的集合数量，因为只要我这个有和前面任何一个余数相同，都能得到一个被K整除的区间（并且还不一样），利用这个我们可得到优化。</p><h4 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="comment">//因为是前缀和，数还是比较大的</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span>  a[N];</span><br><span class="line"><span class="comment">//这里cnt[]最差情况也就所有数的余数相同（最大也就100000），不需要long long</span></span><br><span class="line"><span class="type">int</span> cnt[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n,m;</span><br><span class="line">  cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="comment">//余数为0说明本身就是可已被整除（可以模拟一下，如果初始为零会有有什么后果，这里就不说了）</span></span><br><span class="line">  cnt[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//一般像求这种区间数量的，都非常大要long long</span></span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="comment">//自己前缀自己</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    a[i]+=a[i<span class="number">-1</span>];</span><br><span class="line">    <span class="comment">//加上之前和自己有相同余数的区间数量（两个构成一个可以被K整除的区间）</span></span><br><span class="line">    res+=cnt[a[i]%m];</span><br><span class="line"><span class="comment">//累加自己，因为后面还有可能有可以和他组成可被K整除的区间</span></span><br><span class="line">    cnt[a[i]%m]++;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="15-分巧克力"><a href="#15-分巧克力" class="headerlink" title="15 分巧克力"></a>15 分巧克力</h1><p>解题日期：250215<br>解题用时：50min<br>题目来源：蓝桥杯真题<br>题目难度：中等<br>题目标签：2017，省赛，二分</p><h4 id="题意整理-4"><a href="#题意整理-4" class="headerlink" title="题意整理"></a>题意整理</h4><p>共有N块巧克力，输入每一块的长和宽，现在需要将其分成k块，每块都是大小相等的正方形，求最大边长。</p><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>先确定每一块巧克力可以分成的数量是(a&#x2F;m)* (b&#x2F;m)，根据这个可以枚举出来结果。再使用二分算法优化，初始最短为1，最长为10000，对于确定的边长计算出可以分成的总数，与k进行判断比较，如果符合条件就往大取，不符合往小取。最后取r即为答案。</p><h4 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">int</span> h[N],w[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span> <span class="comment">//边长为mid的正方形</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)  <span class="comment">//n块巧克力的切块</span></span><br><span class="line">&#123;</span><br><span class="line">  res += (h[i]/mid) * (w[i]/mid); <span class="comment">//计算切一块巧克力的可获得的块数</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>(res &gt;= k)  <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//如果达到要求，则可以直接提前退出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//如果n块已经全部切完，且退出循环res &lt; k,则不符合要求</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 请在此输入您的代码</span></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;h[i],&amp;w[i]);</span><br><span class="line"><span class="comment">//二分法判断边长</span></span><br><span class="line">  <span class="type">int</span> l = <span class="number">1</span>,r = <span class="number">1e5</span>;  <span class="comment">//至少获得1*1的边长的.</span></span><br><span class="line"><span class="keyword">while</span>(l &lt; r)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l = mid; <span class="comment">//判断是否满足，找可满足要求的最大边长切块，mid边长是满足的</span></span><br><span class="line">  <span class="keyword">else</span> r = mid - <span class="number">1</span>;<span class="comment">//说明不满足，需要缩减边长</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,r); </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="16-拉马车"><a href="#16-拉马车" class="headerlink" title="16 拉马车"></a>16 拉马车</h1><p>解题日期：250216<br>解题用时：40min<br>题目来源：蓝桥杯真题<br>题目难度：中等<br>题目标签：2017，模拟，省赛</p><h4 id="题意整理-5"><a href="#题意整理-5" class="headerlink" title="题意整理"></a>题意整理</h4><p>马拉车纸牌游戏，过程如你熟悉。输入A和B的初始牌组，求最后赢家的牌组，如果不能分出胜负，则输出-1</p><h4 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h4><p>直接模拟，难点是字符串指针，以及栈数据结构的使用。</p><h4 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="type">bool</span> a[<span class="number">128</span>]; <span class="comment">// a[i]表示牌堆中是否存在i这张牌 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">  string A,B; </span><br><span class="line">  cin&gt;&gt;A&gt;&gt;B; </span><br><span class="line">  stack&lt;<span class="type">char</span>&gt; S; <span class="comment">// 用栈作为牌堆</span></span><br><span class="line">  S.<span class="built_in">push</span>(A[<span class="number">0</span>]); a[A[<span class="number">0</span>]<span class="number">-0</span>]=<span class="number">1</span>; A.<span class="built_in">erase</span>(<span class="number">0</span>,<span class="number">1</span>); <span class="comment">// A先出牌</span></span><br><span class="line">  <span class="type">bool</span> flag=<span class="number">1</span>; <span class="comment">// flag控制到谁出牌 </span></span><br><span class="line">  <span class="type">int</span> times=<span class="number">0</span>; <span class="comment">// times表示出牌次数，超过10000认为会无限循环 </span></span><br><span class="line">  <span class="keyword">while</span>(A.<span class="built_in">length</span>() &amp;&amp; B.<span class="built_in">length</span>() &amp;&amp; times&lt;<span class="number">10000</span>)&#123; </span><br><span class="line">    <span class="comment">//cout&lt;&lt;A&lt;&lt;&quot;,&quot;&lt;&lt;B&lt;&lt;endl; </span></span><br><span class="line">    string* sp=flag?&amp;B:&amp;A; <span class="comment">// flag为1时B出牌，将string指针指向B，方便实现B的出牌和收牌 </span></span><br><span class="line">    <span class="type">char</span> tmp=(*sp)[<span class="number">0</span>];</span><br><span class="line">    S.<span class="built_in">push</span>(tmp); sp-&gt;<span class="built_in">erase</span>(<span class="number">0</span>,<span class="number">1</span>); <span class="comment">// 玩家出牌 </span></span><br><span class="line">    <span class="keyword">if</span>(a[tmp<span class="number">-0</span>]==<span class="number">0</span>) &#123; a[tmp<span class="number">-0</span>]=<span class="number">1</span>; flag = !flag; &#125; <span class="comment">// 牌堆中没有当前出的牌，牌权更换 </span></span><br><span class="line">    <span class="keyword">else</span>&#123; <span class="comment">// 若包含当前字符，收回一部分牌 </span></span><br><span class="line">      *sp += S.<span class="built_in">top</span>(); S.<span class="built_in">pop</span>(); <span class="comment">// 收回刚出的那张牌，位于栈顶 </span></span><br><span class="line">      <span class="keyword">while</span>(S.<span class="built_in">top</span>()!=tmp)&#123; *sp += S.<span class="built_in">top</span>(); a[S.<span class="built_in">top</span>()<span class="number">-0</span>] = <span class="number">0</span>; S.<span class="built_in">pop</span>(); &#125; <span class="comment">//一直收牌到与所出牌相同的另一张牌处 </span></span><br><span class="line">      *sp += S.<span class="built_in">top</span>(); a[S.<span class="built_in">top</span>()<span class="number">-0</span>] = <span class="number">0</span>; S.<span class="built_in">pop</span>(); </span><br><span class="line">    &#125; </span><br><span class="line">    times++; </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">if</span>(times&gt;=<span class="number">10000</span>) <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">  <span class="keyword">if</span>(A.<span class="built_in">length</span>()) cout&lt;&lt;A; <span class="keyword">else</span> cout&lt;&lt;B; </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="17-分考场"><a href="#17-分考场" class="headerlink" title="17 分考场"></a>17 分考场</h1><p>解题日期：250216<br>解题用时：45min<br>题目来源：蓝桥杯真题<br>题目难度：中等<br>题目标签：2017，搜索，国赛</p><h4 id="题意整理-6"><a href="#题意整理-6" class="headerlink" title="题意整理"></a>题意整理</h4><p>n个人分考场，两两相互认识不能在同一考场，输入相互认识的信息，求最少需要多少考场。</p><h4 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h4><p>使用深度优先搜索即可。</p><h4 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> a[N][N];<span class="comment">//关系表 如：a[u][v]=1，表示第u个人与第v个人认识</span></span><br><span class="line"><span class="type">int</span> p[N][N];<span class="comment">//考场状态，p[j][k]=y:表示第j个考场的第k个座位，坐第y个人</span></span><br><span class="line"><span class="type">int</span> num = N;<span class="comment">//最优考场数量</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> room)</span><span class="comment">//试试把第x个人安排到第1到room考场</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (room &gt;= num)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; n)<span class="comment">//已经安排了n个人，结束</span></span><br><span class="line">    &#123;</span><br><span class="line">        num = <span class="built_in">min</span>(num, room);<span class="comment">//更新最优解</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> j, k;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= room; j++)<span class="comment">//枚举考场,把第x个人放入第j个考场里</span></span><br><span class="line">    &#123;</span><br><span class="line">        k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (p[j][k] &amp;&amp; !a[x][p[j][k]])<span class="comment">//表示j考场第k个位置有人坐并且二者并不认识</span></span><br><span class="line">            k++;<span class="comment">//第x个人去做下一个位置</span></span><br><span class="line">        <span class="keyword">if</span> (p[j][k] == <span class="number">0</span>)<span class="comment">//如果没人坐</span></span><br><span class="line">        &#123;</span><br><span class="line">            p[j][k] = x;<span class="comment">//让x坐在这里</span></span><br><span class="line">            <span class="built_in">dfs</span>(x + <span class="number">1</span>, room);<span class="comment">//继续去安排下一个人</span></span><br><span class="line">            p[j][k] = <span class="number">0</span>;<span class="comment">//回溯，释放这个座位</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果安排不了，就再加一个考场</span></span><br><span class="line">    p[room + <span class="number">1</span>][<span class="number">1</span>] = x;</span><br><span class="line">    <span class="built_in">dfs</span>(x + <span class="number">1</span>, room + <span class="number">1</span>);<span class="comment">//继续去安排下一个人</span></span><br><span class="line">    p[room + <span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;<span class="comment">//回溯</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        a[u][v] =a[v][u]= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="18-合根植物"><a href="#18-合根植物" class="headerlink" title="18 合根植物"></a>18 合根植物</h1><p>解题日期：250217<br>解题用时：30min<br>题目来源：蓝桥杯真题<br>题目难度：中等<br>题目标签：2017，并查集，国赛</p><h4 id="题意整理-7"><a href="#题意整理-7" class="headerlink" title="题意整理"></a>题意整理</h4><p>种植园中共有m* n棵合根植物，连根则合为一颗植物，输入m，n，以及k组数据表示a与b连根，问共有多少颗合根植物</p><h4 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h4><p>并查集模板题</p><a href="/2025/02/16/%E5%B9%B6%E6%9F%A5%E9%9B%86/" title="并查集">并查集</a><h4 id="AC代码-6"><a href="#AC代码-6" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1000010</span>;</span><br><span class="line"><span class="comment">//记录父根</span></span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="comment">//查找加优化，不知道的可以先学一下这个算法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p[x]!=x)p[x]=<span class="built_in">find</span>(p[x]);</span><br><span class="line">  <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n,m,k;</span><br><span class="line">  cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line"><span class="comment">//并查集初始化，所有植物自成一类</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*m;i++)&#123;</span><br><span class="line">    p[i] = i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">    <span class="type">int</span> a , b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="type">int</span> pa = <span class="built_in">find</span>(a), pb = <span class="built_in">find</span>(b);</span><br><span class="line"> <span class="comment">//合并集合</span></span><br><span class="line">    <span class="keyword">if</span>(pa ! = pb)  p[pa] = pb; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//当p[i]=i 说明他是父根，也说明他代表一种植物</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*m;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[i]==i) res++;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="19-区间移位"><a href="#19-区间移位" class="headerlink" title="19 区间移位"></a>19 区间移位</h1><p>解题日期：250217<br>解题用时：45min<br>题目来源：蓝桥杯真题<br>题目难度：中等<br>题目标签：2017，枚举，国赛，二分</p><h4 id="题意整理-8"><a href="#题意整理-8" class="headerlink" title="题意整理"></a>题意整理</h4><p>数轴上n个闭区间，已知区间长度之和至少又10^4 ，移动区间使其并集覆盖[0，10^4]，找到一种方法使移动距离最大的区间的移动距离最小。</p><h4 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h4><p>不用关心区间怎么移动。只要去寻找最小的能满足覆盖0~10000的移动距离</p><h4 id="AC代码-7"><a href="#AC代码-7" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span>    b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">vector&lt;Node&gt; nv;<span class="comment">//node vector</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ngreater</span><span class="params">(Node a,Node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.b &lt; b.b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> mr = <span class="number">0</span>;<span class="comment">//most right node，指的是目前可移动距离为mid下，最右点可以达到的位置，是满足0-mr区间内没有空白区域的</span></span><br><span class="line">    <span class="function">vector&lt;Node&gt; <span class="title">temp</span><span class="params">(nv)</span></span>;<span class="comment">//临时复制品</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)<span class="comment">//存在特殊区间，多判断几次</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;<span class="comment">//如果所有循环结束后还是false，说明这个mid不合格</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; temp.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">            Node node = temp[i];</span><br><span class="line">            <span class="type">int</span> na = node.a, nb = node.b;</span><br><span class="line">            <span class="type">int</span> len = nb - na;</span><br><span class="line">            <span class="keyword">if</span> (na - mid &lt;= mr &amp;&amp; mr &lt;= nb + mid) &#123;<span class="comment">//目前最右点可以达到的位置如果不在这个区间内，就意味着这个区间之前的位置存在空白区域，无法连接，就跳过，试下一个区间</span></span><br><span class="line">                flag = <span class="literal">true</span>;<span class="comment">//这个区间目前合格</span></span><br><span class="line">                <span class="keyword">if</span> (na + mid &gt;= mr)<span class="comment">//假如对于这个区间q而言，最左端a向右最多移动mid距离后</span></span><br><span class="line">                    mr += len;<span class="comment">//，能超过当前最右点可以达到的位置，那么mr能到达的新的最右点即使是首尾相连后的b点，相当于新增了len的长度</span></span><br><span class="line">                <span class="keyword">else</span><span class="comment">//若是不能超过，那么mr的位置最多到b+mid的位置</span></span><br><span class="line">                    mr = nb + mid;</span><br><span class="line">                temp.<span class="built_in">erase</span>(temp.<span class="built_in">begin</span>() + i);<span class="comment">//避免重复判断</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mr &gt;= <span class="number">20000</span> || !flag) <span class="keyword">break</span>;<span class="comment">//当没有能满足条件的区间存在时或者mr已经满足条件后，就break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mr &gt;= <span class="number">20000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        nv.<span class="built_in">push_back</span>(&#123; a * <span class="number">2</span>,b * <span class="number">2</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">20000</span>,mid;</span><br><span class="line">    <span class="built_in">sort</span>(nv.<span class="built_in">begin</span>(), nv.<span class="built_in">end</span>(), ngreater);<span class="comment">//node按照最右点，从小到大排序</span></span><br><span class="line">    <span class="keyword">while</span> (r &gt;= l) &#123;</span><br><span class="line">        mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid - <span class="number">1</span>;<span class="comment">//寻找的是尽可能小的移动范围，所以mid成立的情况下移动范围收缩</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;<span class="comment">//不成立说明mid移动太小了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> m = ((<span class="type">double</span>)r + <span class="number">1</span>) / <span class="number">2</span>;<span class="comment">//前面翻倍了，这里返回。+1是因为前面当r==l==mid时，如果mid满足，r会-1这里加回来，如果mid不满足，那么由于r是逐渐由mid-1来的</span></span><br><span class="line">                            <span class="comment">//那我们知道比r大的区域肯定是满足的，所以虽然这个r不满足，但是r+1肯定满足</span></span><br><span class="line">    cout &lt;&lt; m;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="20-数组操作"><a href="#20-数组操作" class="headerlink" title="20 数组操作"></a>20 数组操作</h1><p>解题日期：250217<br>解题用时：26min<br>题目来源：蓝桥杯真题<br>题目难度：中等<br>题目标签：2017，线段树，国赛</p><h4 id="题意整理-9"><a href="#题意整理-9" class="headerlink" title="题意整理"></a>题意整理</h4><p>给出一个长度为n的数组，从1到n标号，需要维护m个操作。<br>l到r都加上d<br>l1到r1的位置赋值成l2到r2的值<br>求出数组中下标l到r的位置的和</p><h4 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h4><p>线段树模板题目</p><a href="/2025/02/17/%E7%BA%BF%E6%AE%B5%E6%A0%91/" title="线段树">线段树</a><h4 id="AC代码-8"><a href="#AC代码-8" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> v[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> x=<span class="number">0</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">  <span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">&#x27;0&#x27;</span>;c=<span class="built_in">getchar</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> m=<span class="built_in">read</span>(),n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  v[i]=<span class="built_in">read</span>();</span><br><span class="line">  <span class="type">int</span> a,b,c,d,op;</span><br><span class="line">  <span class="keyword">while</span>(m--)</span><br><span class="line">  &#123;</span><br><span class="line">    op=<span class="built_in">read</span>();</span><br><span class="line">    a=<span class="built_in">read</span>();b=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      c=<span class="built_in">read</span>();d=<span class="built_in">read</span>();</span><br><span class="line">      <span class="keyword">if</span>(a&lt;c)</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=a;i&lt;=b;i++)</span><br><span class="line">      v[i]=v[c++];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=b;i&gt;=a;i--)</span><br><span class="line">        v[i]=v[d--];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      c=<span class="built_in">read</span>();</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=a;i&lt;=b;i++)</span><br><span class="line">      v[i]+=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=a;i&lt;=b;i++)</span><br><span class="line">      sum+=v[i];</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,sum);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/2025/02/17/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2025/02/17/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>线段树（Segment Tree）是一种二叉树数据结构，主要用于高效处理区间查询和更新操作。它常用于解决涉及数组区间的问题，如区间求和、区间最小值&#x2F;最大值、区间更新等。</p><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>线段树将数组划分为多个区间，每个节点代表一个区间，叶子节点代表单个元素，非叶子节点代表其子节点区间的合并。通过这种结构，线段树可以在对数时间内完成区间查询和更新。</p><h3 id="主要操作"><a href="#主要操作" class="headerlink" title="主要操作"></a>主要操作</h3><ol><li><p><strong>构建（Build）</strong>：</p><ul><li>递归地将数组划分为子区间，直到每个区间只包含一个元素。</li><li>每个节点存储其代表区间的信息（如和、最小值等）。</li></ul></li><li><p><strong>查询（Query）</strong>：</p><ul><li>给定一个区间 <code>[L, R]</code>，递归地查询与 <code>[L, R]</code> 有交集的节点。</li><li>合并查询结果，返回所需信息。</li></ul></li><li><p><strong>更新（Update）</strong>：</p><ul><li>更新某个元素的值，递归地更新包含该元素的所有区间节点。</li><li>确保所有相关节点的信息同步更新。</li></ul></li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设有一个数组 <code>[1, 3, 5, 7, 9, 11]</code>，构建线段树后：</p><ul><li>根节点代表整个数组 <code>[0, 5]</code>。</li><li>左子节点代表 <code>[0, 2]</code>，右子节点代表 <code>[3, 5]</code>。</li><li>叶子节点分别代表单个元素 <code>[0]</code>, <code>[1]</code>, <code>[2]</code>, <code>[3]</code>, <code>[4]</code>, <code>[5]</code>。</li></ul><h3 id="代码示例（Python）"><a href="#代码示例（Python）" class="headerlink" title="代码示例（Python）"></a>代码示例（Python）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SegmentTree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="variable language_">self</span>.n = <span class="built_in">len</span>(data)</span><br><span class="line">        <span class="variable language_">self</span>.size = <span class="number">2</span> ** (<span class="variable language_">self</span>.n - <span class="number">1</span>).bit_length()</span><br><span class="line">        <span class="variable language_">self</span>.tree = [<span class="number">0</span>] * (<span class="number">2</span> * <span class="variable language_">self</span>.size)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.n):</span><br><span class="line">            <span class="variable language_">self</span>.tree[<span class="variable language_">self</span>.size + i] = data[i]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.size - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="variable language_">self</span>.tree[i] = <span class="variable language_">self</span>.tree[<span class="number">2</span> * i] + <span class="variable language_">self</span>.tree[<span class="number">2</span> * i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">self, l, r</span>):</span><br><span class="line">        l += <span class="variable language_">self</span>.size</span><br><span class="line">        r += <span class="variable language_">self</span>.size</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">            <span class="keyword">if</span> l % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                res += <span class="variable language_">self</span>.tree[l]</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> r % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                res += <span class="variable language_">self</span>.tree[r]</span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">            l //= <span class="number">2</span></span><br><span class="line">            r //= <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, idx, value</span>):</span><br><span class="line">        idx += <span class="variable language_">self</span>.size</span><br><span class="line">        <span class="variable language_">self</span>.tree[idx] = value</span><br><span class="line">        idx //= <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> idx &gt;= <span class="number">1</span>:</span><br><span class="line">            <span class="variable language_">self</span>.tree[idx] = <span class="variable language_">self</span>.tree[<span class="number">2</span> * idx] + <span class="variable language_">self</span>.tree[<span class="number">2</span> * idx + <span class="number">1</span>]</span><br><span class="line">            idx //= <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line">st = SegmentTree(data)</span><br><span class="line"><span class="built_in">print</span>(st.query(<span class="number">1</span>, <span class="number">4</span>))  <span class="comment"># 输出 24 (3 + 5 + 7 + 9)</span></span><br><span class="line">st.update(<span class="number">2</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(st.query(<span class="number">1</span>, <span class="number">4</span>))  <span class="comment"># 输出 29 (3 + 10 + 7 + 9)</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>线段树通过将数组划分为多个区间，并在每个节点存储区间信息，实现了高效的区间查询和更新操作。它在处理区间相关问题时非常有用，尤其适合需要频繁查询和更新的场景。</p><hr><p>以下是使用C++实现的线段树示例代码，支持区间求和、单点更新和区间查询操作：</p><h3 id="C-线段树示例代码"><a href="#C-线段树示例代码" class="headerlink" title="C++ 线段树示例代码"></a>C++ 线段树示例代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; tree; <span class="comment">// 线段树数组</span></span><br><span class="line">    <span class="type">int</span> n; <span class="comment">// 原始数组的大小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建线段树</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; data, <span class="type">int</span> node, <span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">            tree[node] = data[start]; <span class="comment">// 叶子节点，存储单个元素</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">build</span>(data, <span class="number">2</span> * node + <span class="number">1</span>, start, mid); <span class="comment">// 递归构建左子树</span></span><br><span class="line">            <span class="built_in">build</span>(data, <span class="number">2</span> * node + <span class="number">2</span>, mid + <span class="number">1</span>, end); <span class="comment">// 递归构建右子树</span></span><br><span class="line">            tree[node] = tree[<span class="number">2</span> * node + <span class="number">1</span>] + tree[<span class="number">2</span> * node + <span class="number">2</span>]; <span class="comment">// 合并左右子树的值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 区间查询</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r &lt; start || l &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 区间无交集，返回0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= start &amp;&amp; r &gt;= end) &#123;</span><br><span class="line">            <span class="keyword">return</span> tree[node]; <span class="comment">// 当前区间完全包含在查询区间内</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> leftSum = <span class="built_in">query</span>(<span class="number">2</span> * node + <span class="number">1</span>, start, mid, l, r); <span class="comment">// 查询左子树</span></span><br><span class="line">        <span class="type">int</span> rightSum = <span class="built_in">query</span>(<span class="number">2</span> * node + <span class="number">2</span>, mid + <span class="number">1</span>, end, l, r); <span class="comment">// 查询右子树</span></span><br><span class="line">        <span class="keyword">return</span> leftSum + rightSum; <span class="comment">// 合并左右子树的结果</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单点更新</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> idx, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">            tree[node] = value; <span class="comment">// 找到目标叶子节点，更新值</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (idx &lt;= mid) &#123;</span><br><span class="line">                <span class="built_in">update</span>(<span class="number">2</span> * node + <span class="number">1</span>, start, mid, idx, value); <span class="comment">// 递归更新左子树</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">update</span>(<span class="number">2</span> * node + <span class="number">2</span>, mid + <span class="number">1</span>, end, idx, value); <span class="comment">// 递归更新右子树</span></span><br><span class="line">            &#125;</span><br><span class="line">            tree[node] = tree[<span class="number">2</span> * node + <span class="number">1</span>] + tree[<span class="number">2</span> * node + <span class="number">2</span>]; <span class="comment">// 更新父节点的值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; data) &#123;</span><br><span class="line">        n = data.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> height = (<span class="type">int</span>)<span class="built_in">ceil</span>(<span class="built_in">log2</span>(n)); <span class="comment">// 计算树的高度</span></span><br><span class="line">        <span class="type">int</span> maxSize = <span class="number">2</span> * (<span class="type">int</span>)<span class="built_in">pow</span>(<span class="number">2</span>, height) - <span class="number">1</span>; <span class="comment">// 线段树的最大大小</span></span><br><span class="line">        tree.<span class="built_in">resize</span>(maxSize, <span class="number">0</span>); <span class="comment">// 初始化线段树数组</span></span><br><span class="line">        <span class="built_in">build</span>(data, <span class="number">0</span>, <span class="number">0</span>, n - <span class="number">1</span>); <span class="comment">// 构建线段树</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 区间查询接口</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">queryRange</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(<span class="number">0</span>, <span class="number">0</span>, n - <span class="number">1</span>, l, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单点更新接口</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">updatePoint</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">0</span>, <span class="number">0</span>, n - <span class="number">1</span>, idx, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; data = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>&#125;;</span><br><span class="line">    <span class="function">SegmentTree <span class="title">st</span><span class="params">(data)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询区间 [1, 4] 的和</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Sum of range [1, 4]: &quot;</span> &lt;&lt; st.<span class="built_in">queryRange</span>(<span class="number">1</span>, <span class="number">4</span>) &lt;&lt; endl; <span class="comment">// 输出 24 (3 + 5 + 7 + 9)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新索引 2 的值为 10</span></span><br><span class="line">    st.<span class="built_in">updatePoint</span>(<span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再次查询区间 [1, 4] 的和</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Sum of range [1, 4] after update: &quot;</span> &lt;&lt; st.<span class="built_in">queryRange</span>(<span class="number">1</span>, <span class="number">4</span>) &lt;&lt; endl; <span class="comment">// 输出 29 (3 + 10 + 7 + 9)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><ol><li><p><strong>线段树结构</strong>：</p><ul><li>使用数组 <code>tree</code> 存储线段树节点。</li><li>每个节点存储一个区间的信息（如区间和）。</li></ul></li><li><p>**构建函数 (<code>build</code>)**：</p><ul><li>递归地将原始数组划分为子区间，构建线段树。</li></ul></li><li><p>**查询函数 (<code>query</code>)**：</p><ul><li>递归地查询与目标区间 <code>[l, r]</code> 有交集的节点，并返回区间和。</li></ul></li><li><p>**更新函数 (<code>update</code>)**：</p><ul><li>递归地更新目标叶子节点，并同步更新其父节点的值。</li></ul></li><li><p><strong>接口函数</strong>：</p><ul><li><code>queryRange(l, r)</code>：查询区间 <code>[l, r]</code> 的和。</li><li><code>updatePoint(idx, value)</code>：更新索引 <code>idx</code> 处的值为 <code>value</code>。</li></ul></li></ol><hr><h3 id="示例输出"><a href="#示例输出" class="headerlink" title="示例输出"></a>示例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sum of range [1, 4]: 24</span><br><span class="line">Sum of range [1, 4] after update: 29</span><br></pre></td></tr></table></figure><hr><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>这个C++实现的线段树支持区间求和、单点更新和区间查询操作，适用于需要高效处理区间问题的场景。通过递归构建和查询，线段树能够在 (O(\log n)) 时间内完成操作。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法知识点补偿 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2025/02/16/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2025/02/16/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p><strong>并查集（Disjoint Set Union，DSU）</strong> 是一种用于管理元素分组的数据结构，主要支持两种操作：</p><ol><li><strong>查找（Find）</strong>：确定某个元素属于哪个集合。</li><li><strong>合并（Union）</strong>：将两个集合合并为一个集合。</li></ol><p>并查集广泛应用于解决动态连通性问题，例如判断图中的两个节点是否连通、统计连通分量等。</p><hr><h3 id="1-核心思想"><a href="#1-核心思想" class="headerlink" title="1. 核心思想"></a>1. <strong>核心思想</strong></h3><p>并查集的核心思想是用一个<strong>父节点数组</strong>来表示每个元素的所属集合。初始时，每个元素都是一个独立的集合，父节点指向自己。通过路径压缩和按秩合并等优化技术，可以高效地支持查找和合并操作。</p><hr><h3 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2. 基本操作"></a>2. <strong>基本操作</strong></h3><h4 id="（1）初始化"><a href="#（1）初始化" class="headerlink" title="（1）初始化"></a>（1）初始化</h4><ul><li>每个元素初始时都是一个独立的集合，父节点指向自己。</li><li>例如，有 5 个元素：<code>[0, 1, 2, 3, 4]</code>，初始化后父节点数组为 <code>parent = [0, 1, 2, 3, 4]</code>。</li></ul><h4 id="（2）查找（Find）"><a href="#（2）查找（Find）" class="headerlink" title="（2）查找（Find）"></a>（2）查找（Find）</h4><ul><li>查找某个元素所属的集合（即根节点）。</li><li>通过递归或迭代的方式，沿着父节点向上查找，直到找到根节点。</li><li><strong>路径压缩优化</strong>：在查找过程中，将路径上的所有节点直接指向根节点，以加快后续查找速度。</li></ul><h4 id="（3）合并（Union）"><a href="#（3）合并（Union）" class="headerlink" title="（3）合并（Union）"></a>（3）合并（Union）</h4><ul><li>将两个元素所在的集合合并为一个集合。</li><li>先找到两个元素的根节点，然后将其中一个根节点的父节点指向另一个根节点。</li><li><strong>按秩合并优化</strong>：在合并时，将较小的树合并到较大的树上，以保持树的平衡。</li></ul><hr><h3 id="3-并查集的实现"><a href="#3-并查集的实现" class="headerlink" title="3. 并查集的实现"></a>3. <strong>并查集的实现</strong></h3><p>以下是并查集的 Python 实现，包含路径压缩和按秩合并优化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="comment"># 初始化父节点数组和秩数组</span></span><br><span class="line">        <span class="variable language_">self</span>.parent = <span class="built_in">list</span>(<span class="built_in">range</span>(n))  <span class="comment"># 每个元素的父节点初始为自己</span></span><br><span class="line">        <span class="variable language_">self</span>.rank = [<span class="number">1</span>] * n  <span class="comment"># 每个集合的秩初始为 1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># 查找根节点，并进行路径压缩</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.parent[x] != x:</span><br><span class="line">            <span class="variable language_">self</span>.parent[x] = <span class="variable language_">self</span>.find(<span class="variable language_">self</span>.parent[x])  <span class="comment"># 路径压缩</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.parent[x]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">union</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="comment"># 合并两个集合</span></span><br><span class="line">        root_x = <span class="variable language_">self</span>.find(x)</span><br><span class="line">        root_y = <span class="variable language_">self</span>.find(y)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> root_x != root_y:</span><br><span class="line">            <span class="comment"># 按秩合并</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.rank[root_x] &gt; <span class="variable language_">self</span>.rank[root_y]:</span><br><span class="line">                <span class="variable language_">self</span>.parent[root_y] = root_x</span><br><span class="line">            <span class="keyword">elif</span> <span class="variable language_">self</span>.rank[root_x] &lt; <span class="variable language_">self</span>.rank[root_y]:</span><br><span class="line">                <span class="variable language_">self</span>.parent[root_x] = root_y</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>.parent[root_y] = root_x</span><br><span class="line">                <span class="variable language_">self</span>.rank[root_x] += <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h3 id="4-并查集的应用场景"><a href="#4-并查集的应用场景" class="headerlink" title="4. 并查集的应用场景"></a>4. <strong>并查集的应用场景</strong></h3><ol><li><p><strong>动态连通性问题</strong>：</p><ul><li>判断两个节点是否连通。</li><li>统计图中的连通分量。</li></ul></li><li><p><strong>最小生成树算法（Kruskal 算法）</strong>：</p><ul><li>用于判断边的两个端点是否属于同一集合。</li></ul></li><li><p><strong>朋友圈问题</strong>：</p><ul><li>给定一组朋友关系，判断有多少个朋友圈。</li></ul></li><li><p><strong>图像处理</strong>：</p><ul><li>用于像素连通区域的标记。</li></ul></li></ol><hr><h3 id="5-并查集的时间复杂度"><a href="#5-并查集的时间复杂度" class="headerlink" title="5. 并查集的时间复杂度"></a>5. <strong>并查集的时间复杂度</strong></h3><ul><li><strong>初始化</strong>：O(n)，其中 n 是元素个数。</li><li><strong>查找（Find）</strong>：接近 O(1)，经过路径压缩后，查找操作的时间复杂度接近常数。</li><li><strong>合并（Union）</strong>：接近 O(1)，经过按秩合并优化后，合并操作的时间复杂度接近常数。</li></ul><hr><h3 id="6-并查集的优化"><a href="#6-并查集的优化" class="headerlink" title="6. 并查集的优化"></a>6. <strong>并查集的优化</strong></h3><ol><li><p><strong>路径压缩</strong>：</p><ul><li>在查找过程中，将路径上的所有节点直接指向根节点，以加快后续查找速度。</li></ul></li><li><p><strong>按秩合并</strong>：</p><ul><li>在合并时，将较小的树合并到较大的树上，以保持树的平衡，避免树过高。</li></ul></li></ol><hr><h3 id="7-并查集的经典问题"><a href="#7-并查集的经典问题" class="headerlink" title="7. 并查集的经典问题"></a>7. <strong>并查集的经典问题</strong></h3><h4 id="（1）判断图中是否有环"><a href="#（1）判断图中是否有环" class="headerlink" title="（1）判断图中是否有环"></a>（1）判断图中是否有环</h4><ul><li>遍历图中的每条边，如果两个端点属于同一集合，则说明存在环。</li></ul><h4 id="（2）统计连通分量"><a href="#（2）统计连通分量" class="headerlink" title="（2）统计连通分量"></a>（2）统计连通分量</h4><ul><li>遍历所有节点，统计不同根节点的个数。</li></ul><h4 id="（3）朋友圈问题"><a href="#（3）朋友圈问题" class="headerlink" title="（3）朋友圈问题"></a>（3）朋友圈问题</h4><ul><li>给定一组朋友关系，判断有多少个朋友圈（连通分量）。</li></ul><hr><h3 id="8-代码示例：朋友圈问题"><a href="#8-代码示例：朋友圈问题" class="headerlink" title="8. 代码示例：朋友圈问题"></a>8. <strong>代码示例：朋友圈问题</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="variable language_">self</span>.parent = <span class="built_in">list</span>(<span class="built_in">range</span>(n))</span><br><span class="line">        <span class="variable language_">self</span>.rank = [<span class="number">1</span>] * n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.parent[x] != x:</span><br><span class="line">            <span class="variable language_">self</span>.parent[x] = <span class="variable language_">self</span>.find(<span class="variable language_">self</span>.parent[x])</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.parent[x]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">union</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        root_x = <span class="variable language_">self</span>.find(x)</span><br><span class="line">        root_y = <span class="variable language_">self</span>.find(y)</span><br><span class="line">        <span class="keyword">if</span> root_x != root_y:</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.rank[root_x] &gt; <span class="variable language_">self</span>.rank[root_y]:</span><br><span class="line">                <span class="variable language_">self</span>.parent[root_y] = root_x</span><br><span class="line">            <span class="keyword">elif</span> <span class="variable language_">self</span>.rank[root_x] &lt; <span class="variable language_">self</span>.rank[root_y]:</span><br><span class="line">                <span class="variable language_">self</span>.parent[root_x] = root_y</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>.parent[root_y] = root_x</span><br><span class="line">                <span class="variable language_">self</span>.rank[root_x] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_circle_num</span>(<span class="params">M</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(M)</span><br><span class="line">    uf = UnionFind(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> M[i][j] == <span class="number">1</span>:</span><br><span class="line">                uf.union(i, j)</span><br><span class="line">    <span class="comment"># 统计根节点的个数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(<span class="built_in">set</span>(uf.find(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">M = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(find_circle_num(M))  <span class="comment"># 输出: 2</span></span><br></pre></td></tr></table></figure><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>并查集是一种高效管理分组的数据结构，核心操作是查找和合并。通过路径压缩和按秩合并优化，可以显著提高性能。它在动态连通性问题、最小生成树算法、朋友圈问题等场景中有广泛应用。</p><hr><p>以下是使用 C++ 实现的并查集代码，包含路径压缩和按秩合并优化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; parent; <span class="comment">// 父节点数组</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; rank;   <span class="comment">// 秩数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数，初始化并查集</span></span><br><span class="line">    <span class="built_in">UnionFind</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        parent.<span class="built_in">resize</span>(n);</span><br><span class="line">        rank.<span class="built_in">resize</span>(n, <span class="number">1</span>); <span class="comment">// 初始时每个集合的秩为 1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            parent[i] = i; <span class="comment">// 每个元素的父节点初始为自己</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找操作，带路径压缩</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[x] != x) &#123;</span><br><span class="line">            parent[x] = <span class="built_in">find</span>(parent[x]); <span class="comment">// 路径压缩</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并操作，带按秩合并</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unionSets</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> rootX = <span class="built_in">find</span>(x);</span><br><span class="line">        <span class="type">int</span> rootY = <span class="built_in">find</span>(y);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (rootX != rootY) &#123;</span><br><span class="line">            <span class="comment">// 按秩合并</span></span><br><span class="line">            <span class="keyword">if</span> (rank[rootX] &gt; rank[rootY]) &#123;</span><br><span class="line">                parent[rootY] = rootX;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rank[rootX] &lt; rank[rootY]) &#123;</span><br><span class="line">                parent[rootX] = rootY;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                parent[rootY] = rootX;</span><br><span class="line">                rank[rootX]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断两个元素是否属于同一集合</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isConnected</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>; <span class="comment">// 元素个数</span></span><br><span class="line">    <span class="function">UnionFind <span class="title">uf</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并操作</span></span><br><span class="line">    uf.<span class="built_in">unionSets</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    uf.<span class="built_in">unionSets</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    uf.<span class="built_in">unionSets</span>(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否连通</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;0 and 4 are connected: &quot;</span> &lt;&lt; uf.<span class="built_in">isConnected</span>(<span class="number">0</span>, <span class="number">4</span>) &lt;&lt; endl; <span class="comment">// 输出: 1 (true)</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2 and 4 are connected: &quot;</span> &lt;&lt; uf.<span class="built_in">isConnected</span>(<span class="number">2</span>, <span class="number">4</span>) &lt;&lt; endl; <span class="comment">// 输出: 0 (false)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><ol><li><p><strong>初始化</strong>：</p><ul><li><code>parent</code> 数组存储每个元素的父节点，初始时每个元素的父节点是自己。</li><li><code>rank</code> 数组存储每个集合的秩（树的高度），初始时为 1。</li></ul></li><li><p><strong>查找操作（<code>find</code>）</strong>：</p><ul><li>通过递归查找根节点，并在查找过程中进行路径压缩，将路径上的所有节点直接指向根节点。</li></ul></li><li><p><strong>合并操作（<code>unionSets</code>）</strong>：</p><ul><li>找到两个元素的根节点，按秩合并（将较小的树合并到较大的树上）。</li></ul></li><li><p><strong>判断连通性（<code>isConnected</code>）</strong>：</p><ul><li>判断两个元素的根节点是否相同。</li></ul></li></ol><hr><h3 id="示例运行"><a href="#示例运行" class="headerlink" title="示例运行"></a>示例运行</h3><p>输入：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">5</span>;</span><br><span class="line"><span class="function">UnionFind <span class="title">uf</span><span class="params">(n)</span></span>;</span><br><span class="line">uf.<span class="built_in">unionSets</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">uf.<span class="built_in">unionSets</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">uf.<span class="built_in">unionSets</span>(<span class="number">1</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 and 4 are connected: 1</span><br><span class="line">2 and 4 are connected: 0</span><br></pre></td></tr></table></figure><hr><h3 id="并查集的应用"><a href="#并查集的应用" class="headerlink" title="并查集的应用"></a>并查集的应用</h3><ol><li><p><strong>动态连通性问题</strong>：</p><ul><li>判断两个节点是否连通。</li><li>统计连通分量。</li></ul></li><li><p><strong>最小生成树算法（Kruskal 算法）</strong>：</p><ul><li>用于判断边的两个端点是否属于同一集合。</li></ul></li><li><p><strong>朋友圈问题</strong>：</p><ul><li>给定一组朋友关系，判断有多少个朋友圈。</li></ul></li></ol><hr><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>并查集是一种高效管理分组的数据结构，核心操作是查找和合并。通过路径压缩和按秩合并优化，可以显著提高性能。以上代码是 C++ 实现的标准模板，适用于大多数并查集相关的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法知识点补偿 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>框架基础与领域选择指南</title>
      <link href="/2025/02/16/%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E4%B8%8E%E9%A2%86%E5%9F%9F%E9%80%89%E6%8B%A9%E6%8C%87%E5%8D%97/"/>
      <url>/2025/02/16/%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E4%B8%8E%E9%A2%86%E5%9F%9F%E9%80%89%E6%8B%A9%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是框架？各个领域的代表性框架"><a href="#什么是框架？各个领域的代表性框架" class="headerlink" title="什么是框架？各个领域的代表性框架"></a>什么是框架？各个领域的代表性框架</h3><p><strong>框架</strong>（Framework）是一个软件开发工具集，它为开发者提供了一套预定义的结构、规则和工具，以帮助开发者高效地构建应用程序。框架通常包含现成的代码和功能模块，允许开发者专注于业务逻辑，而不必从头开始编写所有代码。</p><p>框架的主要特点：</p><ol><li><strong>预定义的代码结构</strong>：框架会规定如何组织代码，让开发者按照一定规范来开发。</li><li><strong>现成的功能模块</strong>：框架通常提供常见的功能，比如数据库连接、路由管理、用户认证等。</li><li><strong>开发工具</strong>：框架提供一些工具，如编译工具、测试工具等，帮助开发者更高效地开发。</li><li><strong>约定优于配置</strong>：大部分框架会遵循约定优于配置的原则，默认有一些配置，开发者只需要遵循这些约定即可。</li></ol><p>框架可以应用在多个领域，下面是一些代表性的框架，按领域分类：</p><h3 id="1-Web前端开发"><a href="#1-Web前端开发" class="headerlink" title="1. Web前端开发"></a>1. <strong>Web前端开发</strong></h3><ul><li><strong>React</strong>：由 Facebook 开发的 JavaScript 库，用于构建用户界面，尤其适合构建单页面应用（SPA）。</li><li><strong>Vue.js</strong>：一个轻量级的前端框架，适合从小型到大型项目，学习曲线较平缓。</li><li><strong>Angular</strong>：由 Google 开发的前端框架，功能全面，适用于构建大型复杂项目。</li></ul><h3 id="2-Web后端开发"><a href="#2-Web后端开发" class="headerlink" title="2. Web后端开发"></a>2. <strong>Web后端开发</strong></h3><ul><li><strong>Spring Boot</strong>：基于 Java 的开发框架，提供开箱即用的功能，适合企业级应用开发。</li><li><strong>Django</strong>：基于 Python 的全栈框架，适合快速构建 Web 应用，内置许多功能。</li><li><strong>Express</strong>：基于 Node.js 的轻量级框架，灵活且快速，适合构建 Web 应用。</li></ul><h3 id="3-移动应用开发"><a href="#3-移动应用开发" class="headerlink" title="3. 移动应用开发"></a>3. <strong>移动应用开发</strong></h3><ul><li><strong>Flutter</strong>：Google 推出的跨平台 UI 工具包，使用 Dart 编程语言，适合高性能跨平台应用开发。</li><li><strong>React Native</strong>：基于 React 的框架，支持用 JavaScript 开发 Android 和 iOS 应用。</li><li><strong>SwiftUI</strong>：苹果推出的声明式框架，用于构建 iOS 应用的用户界面。</li></ul><h3 id="4-数据科学与机器学习"><a href="#4-数据科学与机器学习" class="headerlink" title="4. 数据科学与机器学习"></a>4. <strong>数据科学与机器学习</strong></h3><ul><li><strong>TensorFlow</strong>：Google 提供的开源机器学习框架，广泛应用于深度学习。</li><li><strong>PyTorch</strong>：Facebook 提供的深度学习框架，灵活且易于调试，适合研究和开发。</li><li><strong>scikit-learn</strong>：Python 中一个用于机器学习的库，适用于数据分析和传统机器学习算法。</li></ul><h3 id="5-游戏开发"><a href="#5-游戏开发" class="headerlink" title="5. 游戏开发"></a>5. <strong>游戏开发</strong></h3><ul><li><strong>Unity</strong>：跨平台游戏开发框架，支持 2D 和 3D 游戏，使用 C# 编程语言。</li><li><strong>Unreal Engine</strong>：强大的 3D 游戏开发引擎，使用 C++，适合高质量游戏开发。</li></ul><h3 id="6-桌面应用开发"><a href="#6-桌面应用开发" class="headerlink" title="6. 桌面应用开发"></a>6. <strong>桌面应用开发</strong></h3><ul><li><strong>Qt</strong>：一个跨平台的 C++ 库，用于开发图形用户界面的桌面应用。</li><li><strong>Electron</strong>：一个跨平台桌面应用开发框架，基于 Web 技术（HTML, CSS, JavaScript）开发桌面应用。</li></ul><h3 id="如何选择框架？"><a href="#如何选择框架？" class="headerlink" title="如何选择框架？"></a>如何选择框架？</h3><p>选择框架时，可以根据项目的需求和个人兴趣来决定。比如，如果你要做 Web 开发，可以选择 <strong>Vue.js</strong> 或 <strong>React</strong>，如果要做后端开发，<strong>Spring Boot</strong> 和 <strong>Django</strong> 都是不错的选择。框架的选择不必一味追求流行，而是要根据实际需求和学习曲线来做出选择。</p>]]></content>
      
      
      <categories>
          
          <category> 灵感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再读《只缘身在此山中》</title>
      <link href="/2025/02/16/%E5%86%8D%E8%AF%BB%E3%80%8A%E5%8F%AA%E7%BC%98%E8%BA%AB%E5%9C%A8%E6%AD%A4%E5%B1%B1%E4%B8%AD%E3%80%8B/"/>
      <url>/2025/02/16/%E5%86%8D%E8%AF%BB%E3%80%8A%E5%8F%AA%E7%BC%98%E8%BA%AB%E5%9C%A8%E6%AD%A4%E5%B1%B1%E4%B8%AD%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>《只缘身在此山中》像一卷被云雾浸透的山水长卷，简媜以墨色淋漓的笔锋，勾勒出生命与天地共振的禅意秘境。三十余篇散文，仿若三十余枚被风铃摇碎的月光，散落在五重山门之后，每一片都折射出不同维度的灵光。</p><p>她写自然，并非旁观者冷眼描摹，而是将肉身化为山岚，魂魄凝作霜雪，与万物共呼吸。山寺檐角垂落的月色是眠床，岩隙渗出的清泉是琼浆，一草一木皆成修行道场。当“行住坐卧”四字被拆解成止水之风、苍松之姿、钟鼓之声与无箭之弓，规矩不再是桎梏，反化作肉身与天地同频的韵律。这般境界，恰似古琴弦上流淌的泛音，须以全副心神震颤才能捕捉。</p><p>写竹一节尤见深意。竹管里藏着的何止年轮？分明是千万代拓荒者以血汗浇铸的史诗。青竹挺立如笔，将开山者的足印刻进地脉，可当指尖抚过溜滑竹节，那些斑驳往事已化作春泥，在根系深处酝酿新的轮回。这种对历史的温柔凝视，如同将青铜鼎上的铭文浸入溪流，任锈迹化作粼粼波光。</p><p>最惊艳是写情缘。她把情愫喻作蜷缩在方寸之地的幼兽，而缘分是布满天罗地网的棋局。男女情事在她笔下既非痴缠亦非绝决，倒像两株隔山相望的树，根系在地底交错却永不相逢。那句“缘若在却以无缘了篇”，仿佛将整部《红楼梦》的宿命感凝成一颗琥珀，透着宿慧的凉意。</p><p>这部散文集不是简单的风物志，而是将生命锻打成禅杖的修行录。简媜以文字为舟筏，载着读者穿越迷雾重重的红尘，最终停泊在“无我”的彼岸——原来我们皆是天地经文里的一个逗点，在呼吸吐纳间，完成对永恒刹那的朝圣。</p><blockquote><p>山中若有眠，枕的是月，盖的是满天星辰。<br>夜中若渴，饮的是银瓶泻浆。<br>月不曾瘦，瘦的是辗转反侧的情思。<br>星不曾灭，灭的是阑珊灯火。<br>一片寂静，不该独醒。</p></blockquote><blockquote><p>我甘愿是一个无面目的人，来此认清自己的面目。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文学性读物 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICPC相关工作日志1</title>
      <link href="/2025/02/16/ICPC%E7%9B%B8%E5%85%B3%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%971/"/>
      <url>/2025/02/16/ICPC%E7%9B%B8%E5%85%B3%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%971/</url>
      
        <content type="html"><![CDATA[<h1 id="2024年-ICPC、蓝桥杯、其他训练赛日程"><a href="#2024年-ICPC、蓝桥杯、其他训练赛日程" class="headerlink" title="2024年 ICPC、蓝桥杯、其他训练赛日程"></a>2024年 ICPC、蓝桥杯、其他训练赛日程</h1><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>ICPC比赛日程（第49届，2024年）：<br>第48届（2023） ICPC EC Final 2024年1月12-14日 上海大学<br>湖北邀请赛 2024年5月1-2日 武汉大学<br>陕西邀请赛 2024年5月18-19日 西北工业大学<br>云南邀请赛 2024年5月25-26日 云南大学<br>丝绸之路邀请赛 2024年6月8-9日 宁夏理工学院<br>第一次网络选拔赛 2024年9月15日<br>第二次网络选拔赛 2024年9月21日<br>成都站 2024年10月26-27日 电子科技大学<br>南京站 2024年11月2-3日 南京航空航天大学<br>杭州站 2024年11月9-10日 杭州师范大学<br>上海站 2024年11月16-17日 上海大学<br>沈阳站 2024年11月23-24日 东北大学<br>昆明站 2024年11月30日-12月1日 云南大学<br>第49届（2024） ICPC EC Final 2024年12月14-15日 西北工业大学<br>香港站 2024年12月21-22日 香港理工大学</p><p>院校报名时间：2023年10月7日——2023年12月15日<br>省赛：2024年4月13日 9:00-13:00（软件类）&#x2F;9:00-14:00（电子类）<br>国赛：2024年6月1日 9:00-13:00（软件类）&#x2F;9:00-14:00（电子类）</p><p>2024 牛客暑期多校训练营 2024年6月19日18:00 前报名，可享受早鸟价500元每队，此后报名费为800元每队。</p><h3 id="ICPC相关数据分析"><a href="#ICPC相关数据分析" class="headerlink" title="ICPC相关数据分析"></a>ICPC相关数据分析</h3><p>for 2025<br><strong>邀请赛</strong>：4场  线下 单队预算1500元。预计参与队伍数量6，报名费预算9000元。<br><strong>网络预选赛</strong>：2场  线上  单场单队预算100元。预计参与队伍数量4，报名费预算800元。<br><strong>牛客暑期多校训练营</strong>：1场 线上 单队预算500<del>800元。预计队伍数量2</del>3队，总预算1500<del>1600元。<br><strong>现场赛场次</strong>：6场 线下 预计名额数量2</del>4队 单队预算1500元。（取3）</p><p>总计如下：<br>线下赛报名费预算：13500元（比赛场次：9，单场费用：1500.）<br>线下赛差旅费车票预算：31000元（往返车票单人价格：1000，参赛选手人次：27，带队老师人次：4~5）<br>线下赛差旅费住宿预算：18600元（单人单天价格：300，住宿天数：2，人次：31（参考上））<br>线下赛差旅费餐费预算：6975元（比赛在外天数3，每人每天餐费75元，人次：31）<br>线上赛报名费：2400元（网络预选赛800+牛客暑期训练1600）</p><p>count&#x3D;72475元</p><h3 id="蓝桥杯相关数据分析"><a href="#蓝桥杯相关数据分析" class="headerlink" title="蓝桥杯相关数据分析"></a>蓝桥杯相关数据分析</h3><p>今年报名情况：软件赛-个人赛153人，网络安全4人，电子赛-个人赛5人，视觉艺术设计赛1个团队（2人）<br>如果考虑报名费全部报销，省赛名额应为：164人 单价300元，总计49200元。<br>目前提供的省赛报销预算偏少。</p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 社团管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记《暗淡蓝点》</title>
      <link href="/2025/02/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%8A%E6%9A%97%E6%B7%A1%E8%93%9D%E7%82%B9%E3%80%8B/"/>
      <url>/2025/02/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%8A%E6%9A%97%E6%B7%A1%E8%93%9D%E7%82%B9%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>作者：【美国】卡尔 · 萨根</p><p>萨根强调，尽管科学已经证实地球并非宇宙的中心，但许多人仍在不自觉中秉持着人类中心主义的观念。他主张，人类应摒弃傲慢，意识到自身在宇宙中的渺小，这是迈向宇宙探索的首要步骤。</p><p>在浩瀚的宇宙剧场中，我们并非主角。</p><p>面对宇宙的无限广阔，人类的认知显得如此有限。我们或许不会过分自大，但却容易陷入偏激、狭隘、盲目甚至极端的思维。这是我们一生都需要努力克服的局限。</p><blockquote><p>再看看那个光点，它就在这里。这是家园，这是我们。你所爱的每一个人，你认识的每一个人，你听说过的每一个人，曾经有过的每一个人，都在它的上面度过他们的一生。我们的欢乐与痛苦聚集在一起。数以千计的自以为是的宗教、意识形态和经济学说，每一个猎人与采集者，每一个英雄与懦夫，每一个文明的缔造者与毁灭者，每一个国王与农夫，每一对年轻情侣，每一个母亲和父亲，每一个满怀希望的孩子，每一个发明家和探险家，每一个德高望重的教师，每一个腐败的政客，每一个超级明星，每一个最高领袖，人类历史上的每一个圣人与罪犯，都在这里——一个悬浮于阳光中的尘埃小点上生活。在浩瀚的宇宙剧场里，地球只是一个极小的舞台。想想所有那些帝王将相杀戮得血流成河，他们的辉煌与胜利，使他们成为光点上一个部分的转眼即逝的主宰；想想这个像素的一个角落的居民对某个别的角落几乎没有区别的居民所犯的无穷无尽的残暴罪行，他们的误解何其多也，他们多么急于互相残杀，他们的仇恨如何强烈。  ——Carl Sagan《暗淡蓝点》</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科普类书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025算法练题记录1~10</title>
      <link href="/2025/02/15/2025%E7%AE%97%E6%B3%95%E7%BB%83%E9%A2%98%E8%AE%B0%E5%BD%951-10/"/>
      <url>/2025/02/15/2025%E7%AE%97%E6%B3%95%E7%BB%83%E9%A2%98%E8%AE%B0%E5%BD%951-10/</url>
      
        <content type="html"><![CDATA[<h1 id="01-班级活动"><a href="#01-班级活动" class="headerlink" title="01 班级活动"></a>01 班级活动</h1><p>题目来源：蓝桥杯真题<br>做题时间：250201<br>解题用时：1h44min</p><p>![[Pasted image 20250201191646.png]]</p><p>题目标签： 2023，思维，国赛</p><h4 id="题意整理："><a href="#题意整理：" class="headerlink" title="题意整理："></a>题意整理：</h4><p>输入n个整数，每个整数的范围是1~n，现修改整数的值，使其两两相等（n为偶数，&gt;&#x3D;2个数相等的情况不存在），问最少修改次数。[[map的用法]]</p><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>统计每个数出现的次数，若次数为1，则可以与同为1 的另一个数相互配对，或者与&gt;&#x3D;2的数相互配对，要分别统计count1和count3（&gt;&#x3D;2总量）</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> count1=<span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> count3=<span class="number">0</span>;</span><br><span class="line">  cin&gt;&gt;n;</span><br><span class="line">  map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;myMap;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    cin&gt;&gt;temp;</span><br><span class="line">    myMap[temp]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(myMap[i]&lt;<span class="number">2</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(myMap[i]==<span class="number">1</span>)count1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      count3+=myMap[i]<span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(count1&lt;=count3)count=count3;</span><br><span class="line">  <span class="keyword">else</span> count=(count1+count3)/<span class="number">2</span>;</span><br><span class="line">  cout&lt;&lt;count;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="02-好数"><a href="#02-好数" class="headerlink" title="02 好数"></a>02 好数</h1><p>解题日期：250201<br>解题用时：66min<br>题目来源：蓝桥杯 省赛真题<br>题目难度：简单<br>题目标签：暴力，枚举，省赛，2024</p><h4 id="题意整理"><a href="#题意整理" class="headerlink" title="题意整理"></a>题意整理</h4><p>如图所示，比较清楚了。<br>![[Pasted image 20250201203855.png]]</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>数据范围不是很大，可以直接暴力枚举。<br>（原先往错误的方向思考了很久，一直想要通过构造的方法来解决，复杂性较高，需要额外的约束和管理）<br>暴力枚举写了大概不到十分钟，加上调试的时间是14min。</p><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> N;</span><br><span class="line">  cin&gt;&gt;N;</span><br><span class="line">  <span class="type">int</span> countsum=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> n=i;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      count++;</span><br><span class="line">      temp=n%<span class="number">10</span>;</span><br><span class="line">      n/=<span class="number">10</span>;</span><br><span class="line">      <span class="type">int</span> a=count%<span class="number">2</span>;</span><br><span class="line">      <span class="type">int</span> b=temp%<span class="number">2</span>;</span><br><span class="line">      <span class="keyword">if</span>(a!=b)&#123;</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag!=<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      countsum++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;countsum;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="03-回文字符串"><a href="#03-回文字符串" class="headerlink" title="03 回文字符串"></a>03 回文字符串</h1><p>解题日期：250202<br>解题用时：55min<br>题目来源：蓝桥杯省赛真题<br>题目难度：简单<br>题目标签：字符串hash，前缀和，省赛，2024</p><h4 id="题意整理-1"><a href="#题意整理-1" class="headerlink" title="题意整理"></a>题意整理</h4><p>![[Pasted image 20250202104542.png]]</p><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>逆向思考，增加即是删，但是不是全部删除再判断是否是回文，有漏洞bablab，要删除一个判断一个</p><h4 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断字符串是否是回文</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[left] != s[right]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">  string s;</span><br><span class="line">  cin&gt;&gt;s;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">isPalindrome</span>(s))</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>((!s.<span class="built_in">empty</span>())&amp;&amp;(s.<span class="built_in">back</span>()==<span class="string">&#x27;l&#x27;</span>||s.<span class="built_in">back</span>()==<span class="string">&#x27;q&#x27;</span>||s.<span class="built_in">back</span>()==<span class="string">&#x27;b&#x27;</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    s.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isPalindrome</span>(s))&#123;</span><br><span class="line">      cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="04-纯职业小组"><a href="#04-纯职业小组" class="headerlink" title="04 纯职业小组"></a>04 纯职业小组</h1><p>解题日期：250203<br>解题用时：-min<br>题目来源：蓝桥杯真题 省赛<br>题目难度：困难<br>题目标签：思维，省赛，2024</p><h4 id="题意整理-2"><a href="#题意整理-2" class="headerlink" title="题意整理"></a>题意整理</h4><p>![[Pasted image 20250203194701.png]]</p><h4 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//题意就是说找一些人,且刚好能凑成k队(所以需要考虑最坏的情况,就是都找一些不能凑成一队的人)(题意表述不太清晰)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long<span class="comment">//思路:先拿走少于3的队伍的人数</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">//再在大于3个人的队伍中拿走尽可能多的人数,剩下的人数再存起来;比如有两个队(6,4),如果需要拿走两个队,就在6中拿走5个人,4中拿走2个人,意思就是尽可能拿走一个队伍再余2个人</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+10</span>;<span class="comment">//最后如果队伍数还凑不够的话,再从剩下的人数中拿,每拿一个人队伍数就会加一</span></span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n,k,m=<span class="number">0</span>;</span><br><span class="line">  cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">  map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp,book;<span class="comment">//因为x最大1e9,所以不能用数组存</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    <span class="keyword">if</span>(!book[x])<span class="comment">//防止职业重复存</span></span><br><span class="line">    &#123;</span><br><span class="line">      book[x]=<span class="number">1</span>;</span><br><span class="line">      a[++m]=x;<span class="comment">//用数组记录下职业</span></span><br><span class="line">    &#125;</span><br><span class="line">    mp[x]+=y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(mp[a[i]]&gt;=<span class="number">3</span>)</span><br><span class="line">    cnt+=mp[a[i]]/<span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(cnt&lt;k)<span class="comment">//算算够不够凑成k队</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;&gt;q,qq,qqq;<span class="comment">//从大到小排序</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    q.<span class="built_in">push</span>(mp[a[i]]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">auto</span> x=q.<span class="built_in">top</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">3</span>)<span class="comment">//将比3大的存起来进行计算</span></span><br><span class="line">    qq.<span class="built_in">push</span>(x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    ans+=x;<span class="comment">//比3小的直接加起来,因为他们不可能组成一个队(题意说3个相同的职业才能组成一个队)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(qq.<span class="built_in">size</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">auto</span> x=qq.<span class="built_in">top</span>();</span><br><span class="line">    qq.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="type">int</span> kk=(x<span class="number">+1</span>)/<span class="number">3</span><span class="number">-1</span>;<span class="comment">//这里意思是比如说一个队6个人(或7个人,8个人),想只凑成一队,最多可以拿5个人;x+1是考虑到一个队5个人,要凑成一队可以直接拿走5个人,如果不加一,就会拿走2个人</span></span><br><span class="line">    <span class="type">int</span> t=<span class="built_in">min</span>(kk,k<span class="number">-1</span>);<span class="comment">//这里k-1意思是空一个队伍,方便以后还有大于3人的队伍取不到(剩下的队伍都还能取2个,增添一下人数),要不后面k=0直接退出循环了</span></span><br><span class="line">   <span class="comment">// int res=t*3;</span></span><br><span class="line">    k-=t;<span class="comment">//队伍数减去t</span></span><br><span class="line">    ans+=(t*<span class="number">3</span><span class="number">+2</span>);<span class="comment">//尽量每次多取两个,人数最大化</span></span><br><span class="line">    x-=(t*<span class="number">3</span><span class="number">+2</span>);</span><br><span class="line">    <span class="keyword">if</span>(x)</span><br><span class="line">    qqq.<span class="built_in">push</span>(x);<span class="comment">//把剩下的人单独拿出来</span></span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(qqq.<span class="built_in">size</span>())<span class="comment">//这里放着的都是从大于3个的中拿剩下的,在这里随便拿一个,就会使队伍数量加一</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">auto</span> x=qqq.<span class="built_in">top</span>();</span><br><span class="line">    qqq.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">   <span class="comment">// int t=min(k,x);</span></span><br><span class="line">   <span class="comment">// cout&lt;&lt;k&lt;&lt;&quot; &quot;&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;t&lt;&lt;&#x27;\n&#x27;;</span></span><br><span class="line">    ans++;<span class="comment">//假如本来有4个,存到这里时变成了2个,但是你只能取一个,不能2个都取走(2个都取走会不符合题意)(下面样例自己带入一下可能会清楚一些)</span></span><br><span class="line">    k--;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">比如样例:</span></span><br><span class="line"><span class="comment">3 3</span></span><br><span class="line"><span class="comment">1 4</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//快输</span></span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">  cin&gt;&gt;T;</span><br><span class="line">  <span class="keyword">while</span>(T--)</span><br><span class="line">  <span class="built_in">solve</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你的代码核心思想是 <strong>尽量选择合适的士兵，使其能刚好组成 <code>k</code> 个纯职业小组</strong>。我们从 <strong>最坏的情况</strong> 出发，考虑如何选择士兵，确保 <code>k</code> 个小组可以被组成。下面详细解析代码的逻辑和思路：</p><hr><h2 id="1-题目分析"><a href="#1-题目分析" class="headerlink" title="1. 题目分析"></a><strong>1. 题目分析</strong></h2><ul><li>每个小队由相同职业的士兵组成。</li><li>目标是至少选 <code>k</code> 个士兵队伍，每个队伍至少由 <strong>3 个相同职业的士兵</strong> 组成。</li><li><strong>最坏情况</strong> 下，可能会遇到一些士兵无法凑满 3 人的小组，这会影响队伍数量。</li><li>我们需要找到 <strong>最少的士兵人数</strong> 来确保 <code>k</code> 个小组可以组建成功。</li></ul><hr><h2 id="2-代码逻辑分析"><a href="#2-代码逻辑分析" class="headerlink" title="2. 代码逻辑分析"></a><strong>2. 代码逻辑分析</strong></h2><h3 id="1-读取输入-统计每种职业的士兵数量"><a href="#1-读取输入-统计每种职业的士兵数量" class="headerlink" title="(1) 读取输入 &amp; 统计每种职业的士兵数量"></a><strong>(1) 读取输入 &amp; 统计每种职业的士兵数量</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, k, m = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp, book;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y;  <span class="comment">// x: 职业，y: 该职业的士兵数量</span></span><br><span class="line">    <span class="keyword">if</span> (!book[x]) &#123; <span class="comment">// 防止重复存储相同职业</span></span><br><span class="line">        book[x] = <span class="number">1</span>;</span><br><span class="line">        a[++m] = x; <span class="comment">// 记录职业种类</span></span><br><span class="line">    &#125;</span><br><span class="line">    mp[x] += y; <span class="comment">// 统计每个职业的士兵总数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><ul><li><code>mp[x]</code> 记录 <strong>职业 <code>x</code> 的士兵总数</strong>。</li><li><code>book[x]</code> 避免 <strong>重复统计相同职业</strong>，因为可能存在多个小队有相同职业。</li><li><code>a[]</code> 记录 <strong>所有不同职业的编号</strong>。</li></ul><hr><h3 id="2-计算能完整组成-k-组的职业数"><a href="#2-计算能完整组成-k-组的职业数" class="headerlink" title="(2) 计算能完整组成 k 组的职业数"></a><strong>(2) 计算能完整组成 <code>k</code> 组的职业数</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (mp[a[i]] &gt;= <span class="number">3</span>)</span><br><span class="line">        cnt += mp[a[i]] / <span class="number">3</span>; <span class="comment">// 每 3 人可以组成 1 队</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt &lt; k) &#123; <span class="comment">// 如果连 k 组都凑不出来，直接输出 -1</span></span><br><span class="line">    cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><ul><li>计算所有职业 <strong>能组成多少完整的小队</strong>，即 <code>cnt</code>。</li><li>如果 <code>cnt &lt; k</code>，表示无论如何 <strong>都无法组成 <code>k</code> 组</strong>，直接输出 <code>-1</code>。</li></ul><hr><h3 id="3-按照职业的士兵数量进行分类"><a href="#3-按照职业的士兵数量进行分类" class="headerlink" title="(3) 按照职业的士兵数量进行分类"></a><strong>(3) 按照职业的士兵数量进行分类</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; q, qq, qqq;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    q.<span class="built_in">push</span>(mp[a[i]]); <span class="comment">// 大顶堆，优先选择士兵最多的职业</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><ul><li>使用 <strong>优先队列（大顶堆）</strong>，保证 <strong>尽可能先从士兵多的职业选取</strong>。</li></ul><hr><h3 id="4-处理士兵数量小于-3-的情况"><a href="#4-处理士兵数量小于-3-的情况" class="headerlink" title="(4) 处理士兵数量小于 3 的情况"></a><strong>(4) 处理士兵数量小于 3 的情况</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">    <span class="keyword">auto</span> x = q.<span class="built_in">top</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">3</span>)</span><br><span class="line">        qq.<span class="built_in">push</span>(x);  <span class="comment">// 将数量 ≥3 的放入新的堆</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans += x;    <span class="comment">// 数量小于 3 的，直接累加到最终答案</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><ul><li><strong>数量小于 3</strong> 的士兵 <strong>不能组成小组</strong>，所以他们的数量直接累加。</li><li><strong>数量大于等于 3</strong> 的士兵 <strong>可以尝试组成小组</strong>，存入 <code>qq</code>。</li></ul><hr><h3 id="5-处理士兵数量-3-的情况"><a href="#5-处理士兵数量-3-的情况" class="headerlink" title="(5) 处理士兵数量 &gt;=3 的情况"></a><strong>(5) 处理士兵数量 <code>&gt;=3</code> 的情况</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (qq.<span class="built_in">size</span>()) &#123;</span><br><span class="line">    <span class="keyword">auto</span> x = qq.<span class="built_in">top</span>();</span><br><span class="line">    qq.<span class="built_in">pop</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> kk = (x + <span class="number">1</span>) / <span class="number">3</span> - <span class="number">1</span>; <span class="comment">// 计算最多可以拿走多少人</span></span><br><span class="line">    <span class="type">int</span> t = <span class="built_in">min</span>(kk, k - <span class="number">1</span>);  <span class="comment">// 不能超过剩余需要的小组数（k-1）</span></span><br><span class="line">    </span><br><span class="line">    k -= t;  <span class="comment">// 剩余需要的小组数减少 t</span></span><br><span class="line">    ans += (t * <span class="number">3</span> + <span class="number">2</span>); <span class="comment">// 每次尽量多取 3 人，同时多加 2 人</span></span><br><span class="line">    </span><br><span class="line">    x -= (t * <span class="number">3</span> + <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (x) qqq.<span class="built_in">push</span>(x); <span class="comment">// 还剩下的人存入另一个队列</span></span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><ul><li><strong>优先从大于 3 人的职业中拿走尽可能多的士兵</strong>，确保先组 <code>k-1</code> 个队伍。</li><li><code>kk = (x+1)/3 -1</code>：<ul><li>计算该职业可以 <strong>优先组出几个队伍</strong>，留下 2 个士兵。</li></ul></li><li><code>t = min(kk, k-1)</code>：<ul><li>不能超过剩余需要的小组数 (<code>k-1</code>)，否则有浪费。</li></ul></li><li><code>ans += (t * 3 + 2)</code>：<ul><li>选 <code>t</code> 组小队，每组 <code>3</code> 人，同时多选 <code>2</code> 人。</li></ul></li><li><strong>剩余士兵数量 <code>x</code> 仍然大于 0，放入 <code>qqq</code> 队列</strong>，等待后续分配。</li></ul><hr><h3 id="6-处理剩余士兵"><a href="#6-处理剩余士兵" class="headerlink" title="(6) 处理剩余士兵"></a><strong>(6) 处理剩余士兵</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (qqq.<span class="built_in">size</span>()) &#123;</span><br><span class="line">    <span class="keyword">auto</span> x = qqq.<span class="built_in">top</span>();</span><br><span class="line">    qqq.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    ans++;  <span class="comment">// 每次选一个士兵</span></span><br><span class="line">    k--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><ul><li><strong><code>qqq</code> 队列中的士兵是之前剩余的</strong>，这里 <strong>每选 1 个士兵，就增加 1 组</strong>。</li><li>直到 <strong><code>k==0</code> 时，说明 <code>k</code> 组小队已经全部组好</strong>，停止。</li></ul><hr><h2 id="3-复杂度分析"><a href="#3-复杂度分析" class="headerlink" title="3. 复杂度分析"></a><strong>3. 复杂度分析</strong></h2><ul><li><strong>读取输入：</strong> <code>O(n)</code></li><li><strong>统计职业人数：</strong> <code>O(n)</code></li><li><strong>排序（堆操作）：</strong> <code>O(n log n)</code></li><li><strong>总时间复杂度：</strong> <code>O(n log n)</code></li></ul><hr><h2 id="4-代码总结"><a href="#4-代码总结" class="headerlink" title="4. 代码总结"></a><strong>4. 代码总结</strong></h2><ul><li><strong>首先统计各个职业的士兵数量。</strong></li><li><strong>先处理不足 3 人的职业士兵，他们无法组成队伍，因此直接计算进 <code>ans</code>。</strong></li><li><strong>优先选择士兵数量最多的职业，尽可能组成 <code>k-1</code> 个完整的小队。</strong></li><li><strong>若仍不足 <code>k</code> 个队伍，就从剩余士兵中一个个拿，直到满足 <code>k</code> 个小队的需求。</strong></li><li><strong>最终输出最少的士兵数量 <code>ans</code>。</strong></li></ul><hr><h2 id="5-示例分析"><a href="#5-示例分析" class="headerlink" title="5. 示例分析"></a><strong>5. 示例分析</strong></h2><p><strong>输入：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3 3</span><br><span class="line">1 4</span><br><span class="line">2 4</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><ol><li>统计士兵数量：<ul><li><code>职业 1: 4 人</code></li><li><code>职业 2: 4 人</code></li><li><code>职业 3: 4 人</code></li></ul></li><li>优先拿 <code>4 人</code> 的职业，每次取 <code>3+2=5</code>，保证 <code>k=3</code> 的小组数。</li><li>最终选择的士兵数：**<code>6</code>**。</li></ol><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><hr><h2 id="6-结论"><a href="#6-结论" class="headerlink" title="6. 结论"></a><strong>6. 结论</strong></h2><ul><li>代码通过 <strong>优先队列+贪心策略</strong>，确保选出的士兵 <strong>刚好满足 <code>k</code> 组的需求</strong>，并且 <strong>士兵数量最少</strong>。</li><li>题目关键点在于：<ol><li><strong>处理不能组成 3 人小队的士兵</strong>。</li><li><strong>优先从士兵数量最多的职业中选人</strong>。</li><li><strong>剩余士兵尽可能高效利用，凑成 <code>k</code> 组</strong>。</li></ol></li></ul><p>这道题涉及 <strong>贪心+优先队列</strong>，是一个比较好的算法练习题！🎯</p><hr><h1 id="05-奇怪的捐赠"><a href="#05-奇怪的捐赠" class="headerlink" title="05 奇怪的捐赠"></a>05 奇怪的捐赠</h1><p>解题日期：250204<br>解题用时：15min<br>题目来源：蓝桥杯真题<br>题目难度：简单<br>题目标签：填空题</p><h4 id="题意整理-3"><a href="#题意整理-3" class="headerlink" title="题意整理"></a>题意整理</h4><p>![[Pasted image 20250204193727.png]]</p><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>转换为7进制，每一位相加即可</p><h4 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> x=<span class="number">1000000</span>;</span><br><span class="line">  <span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(x&gt;<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    temp=x%<span class="number">7</span>;</span><br><span class="line">    res+=temp;</span><br><span class="line">    x/=<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;res;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="06-握手问题"><a href="#06-握手问题" class="headerlink" title="06 握手问题"></a>06 握手问题</h1><p>解题日期：250204<br>解题用时：5min<br>题目来源：蓝桥杯真题<br>题目难度：简单<br>题目标签：省赛，数学，2024</p><h4 id="题意整理-4"><a href="#题意整理-4" class="headerlink" title="题意整理"></a>题意整理</h4><p>![[Pasted image 20250204194959.png]]</p><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>排列组合，两两相减即可</p><h4 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> temp1=<span class="number">50</span>*<span class="number">49</span>/<span class="number">2</span>;</span><br><span class="line">  <span class="type">int</span> temp2=<span class="number">7</span>*<span class="number">6</span>/<span class="number">2</span>;</span><br><span class="line">  <span class="type">int</span> res=temp1-temp2;</span><br><span class="line">  cout&lt;&lt;res;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="07-最大区间"><a href="#07-最大区间" class="headerlink" title="07 最大区间"></a>07 最大区间</h1><p>解题日期：250204<br>解题用时：-min<br>题目来源：蓝桥杯真题<br>题目难度：中等<br>题目标签：2023，单调栈，国赛[[单调栈]]</p><h4 id="题意整理-5"><a href="#题意整理-5" class="headerlink" title="题意整理"></a>题意整理</h4><p>![[Pasted image 20250204203247.png]]</p><h4 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> il inline</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> ull = <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll N = <span class="number">1e5</span> + <span class="number">5</span>, mod = <span class="number">998244353</span>, inf = <span class="number">2e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n,top=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    vector&lt;ll&gt;<span class="built_in">a</span>(n<span class="number">+5</span>),<span class="built_in">stak</span>(n<span class="number">+5</span>),<span class="built_in">dpl</span>(n<span class="number">+5</span>),<span class="built_in">dpr</span>(n<span class="number">+5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(top&amp;&amp;a[stak[top]]&gt;=a[i])top--;</span><br><span class="line">        dpl[i]=stak[top];</span><br><span class="line">        <span class="comment">//cout&lt;&lt;dpl[i]&lt;&lt;&quot; \n&quot;[i==n];</span></span><br><span class="line">        stak[++top]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    top=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(top&amp;&amp;a[stak[top]]&gt;=a[i])top--;</span><br><span class="line">        dpr[i]=stak[top];</span><br><span class="line">        <span class="comment">//cout&lt;&lt;dpr[i]&lt;&lt;&quot; \n&quot;[i==1];</span></span><br><span class="line">        stak[++top]=i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,(dpr[i]-dpl[i]<span class="number">-1</span>)*a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cin &gt;&gt; t;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码是解决了一个典型的“区间最小值问题”的题目。具体来说，它通过使用<strong>单调栈</strong>来计算每个元素在其左侧和右侧的第一个小于自己的元素的位置，利用这些信息来推导出每个元素在区间中的最大贡献值。</p><h3 id="解题思路分析："><a href="#解题思路分析：" class="headerlink" title="解题思路分析："></a>解题思路分析：</h3><ol><li><p><strong>问题描述简化</strong>：</p><ul><li>给定一个数组 <code>a[]</code>，要求在每个位置 <code>i</code> 上找出一个区间 <code>[l, r]</code>，使得 <code>a[i]</code> 是该区间的最小值，并且要找出这个区间的面积。</li><li>这个面积即为 <code>(r - l - 1) * a[i]</code>，其中 <code>l</code> 是区间的左端点，<code>r</code> 是区间的右端点。</li></ul></li><li><p><strong>单调栈的应用</strong>：</p><ul><li><strong>左侧第一个小于自己的数</strong>：<ul><li>通过栈从左到右遍历数组，维护一个栈，栈内的元素是数组索引，栈内的元素是单调递增的（即栈内元素对应的 <code>a[]</code> 值递增）。这样每次遇到一个比栈顶元素小的数，就可以确定当前数的左边第一个比它小的数的位置。</li></ul></li><li><strong>右侧第一个小于自己的数</strong>：<ul><li>通过栈从右到左遍历数组，操作方式与左侧相似，栈内保持单调递增。遍历时，每次遇到比栈顶元素小的数，可以确定当前数的右边第一个比它小的数的位置。</li></ul></li></ul></li><li><p><strong>详细步骤</strong>：</p><ul><li><strong>计算左边第一个小于自己的数</strong>（<code>dpl[]</code>）：<ul><li>维护一个栈 <code>stak</code>，遍历数组 <code>a[]</code>，如果当前栈顶元素比 <code>a[i]</code> 大，则弹出栈顶元素。这样栈顶的元素就是左侧第一个比 <code>a[i]</code> 小的元素的下标。记录这个下标为 <code>dpl[i]</code>，表示左侧第一个小于 <code>a[i]</code> 的位置。</li></ul></li><li><strong>计算右边第一个小于自己的数</strong>（<code>dpr[]</code>）：<ul><li>从右向左遍历数组，和左边的操作类似，维护一个栈 <code>stak</code>，找到每个元素右侧第一个小于自己的数的下标，记录在 <code>dpr[i]</code> 中。</li></ul></li><li><strong>计算面积</strong>：<ul><li>对于每个位置 <code>i</code>，其能够代表最小值的区间范围是从 <code>dpl[i] + 1</code> 到 <code>dpr[i] - 1</code>，因此它的贡献值（即面积）为 <code>(dpr[i] - dpl[i] - 1) * a[i]</code>。遍历所有位置，找到最大的贡献值即为最终答案。</li></ul></li></ul></li><li><p><strong>时间复杂度分析</strong>：</p><ul><li>单调栈的操作每个元素入栈和出栈最多一次，因此时间复杂度是 <code>O(n)</code>，整个过程遍历两遍数组（一次从左到右，另一次从右到左），所以总时间复杂度是 <code>O(n)</code>，效率较高。</li></ul></li></ol><h3 id="代码关键部分："><a href="#代码关键部分：" class="headerlink" title="代码关键部分："></a>代码关键部分：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">while</span>(top &amp;&amp; a[stak[top]] &gt;= a[i]) top--; <span class="comment">// 保持栈是单调递增的</span></span><br><span class="line">    dpl[i] = stak[top]; <span class="comment">// 栈顶元素就是左边第一个小于 a[i] 的下标</span></span><br><span class="line">    stak[++top] = i; <span class="comment">// 将当前元素的索引压栈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">    <span class="keyword">while</span>(top &amp;&amp; a[stak[top]] &gt;= a[i]) top--; <span class="comment">// 保持栈是单调递增的</span></span><br><span class="line">    dpr[i] = stak[top]; <span class="comment">// 栈顶元素就是右边第一个小于 a[i] 的下标</span></span><br><span class="line">    stak[++top] = i; <span class="comment">// 将当前元素的索引压栈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    ans = <span class="built_in">max</span>(ans, (dpr[i] - dpl[i] - <span class="number">1</span>) * a[i]); <span class="comment">// 计算最大面积</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li><strong>核心思想</strong>：通过单调栈分别计算每个位置的左边和右边第一个小于它的数的位置，结合这些位置可以计算每个数作为最小值的最大区间面积，最终取最大值。</li><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是数组长度。</li></ul><hr><h1 id="08-模拟"><a href="#08-模拟" class="headerlink" title="08 模拟"></a>08 模拟</h1><p>解题日期：250204<br>解题用时：5min<br>题目来源：蓝桥杯真题<br>题目难度：中等<br>题目标签：2022，模拟</p><h4 id="题意整理-6"><a href="#题意整理-6" class="headerlink" title="题意整理"></a>题意整理</h4><h2 id="Pasted-image-20250204224451-png-解题思路直接模拟即可-AC代码"><a href="#Pasted-image-20250204224451-png-解题思路直接模拟即可-AC代码" class="headerlink" title="![[Pasted image 20250204224451.png]]#### 解题思路直接模拟即可#### AC代码"></a>![[Pasted image 20250204224451.png]]<br>#### 解题思路<br>直接模拟即可<br>#### AC代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string s;</span><br><span class="line">  cin&gt;&gt;s;</span><br><span class="line">  <span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> y=<span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> n=s.<span class="built_in">length</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(s[i]==<span class="string">&#x27;U&#x27;</span>)x-=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(s[i]==<span class="string">&#x27;D&#x27;</span>)x+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(s[i]==<span class="string">&#x27;L&#x27;</span>)y-=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(s[i]==<span class="string">&#x27;R&#x27;</span>)y+=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;y;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></h2><h1 id="09-天干地支"><a href="#09-天干地支" class="headerlink" title="09 天干地支"></a>09 天干地支</h1><p>解题日期：250204<br>解题用时：7min<br>题目来源：蓝桥杯真题<br>题目难度：中等<br>题目标签：2020，模拟，国赛</p><h4 id="题意整理-7"><a href="#题意整理-7" class="headerlink" title="题意整理"></a>题意整理</h4><p>![[Pasted image 20250205092750.png]]</p><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>简单计算，注意x-2020可能&lt;0</p><h4 id="AC代码-6"><a href="#AC代码-6" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin&gt;&gt;n;</span><br><span class="line">  <span class="type">int</span> count=(n<span class="number">-2020</span><span class="number">+6000</span>)%<span class="number">60</span>;</span><br><span class="line">  <span class="type">int</span> counttg=count%<span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> countdz=count%<span class="number">12</span>;</span><br><span class="line">  string tg;</span><br><span class="line">  string dz;</span><br><span class="line">  <span class="keyword">if</span>(counttg==<span class="number">0</span>)tg=<span class="string">&quot;geng&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(counttg==<span class="number">1</span>)tg=<span class="string">&quot;xin&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(counttg==<span class="number">2</span>)tg=<span class="string">&quot;ren&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(counttg==<span class="number">3</span>)tg=<span class="string">&quot;gui&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(counttg==<span class="number">4</span>)tg=<span class="string">&quot;jia&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(counttg==<span class="number">5</span>)tg=<span class="string">&quot;yi&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(counttg==<span class="number">6</span>)tg=<span class="string">&quot;bing&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(counttg==<span class="number">7</span>)tg=<span class="string">&quot;ding&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(counttg==<span class="number">8</span>)tg=<span class="string">&quot;wu&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(counttg==<span class="number">9</span>)tg=<span class="string">&quot;ji&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">0</span>)dz=<span class="string">&quot;zi&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">1</span>)dz=<span class="string">&quot;chou&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">2</span>)dz=<span class="string">&quot;yin&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">3</span>)dz=<span class="string">&quot;mao&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">4</span>)dz=<span class="string">&quot;chen&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">5</span>)dz=<span class="string">&quot;si&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">6</span>)dz=<span class="string">&quot;wu&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">7</span>)dz=<span class="string">&quot;wei&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">8</span>)dz=<span class="string">&quot;shen&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">9</span>)dz=<span class="string">&quot;you&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">10</span>)dz=<span class="string">&quot;xu&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(countdz==<span class="number">11</span>)dz=<span class="string">&quot;hai&quot;</span>;</span><br><span class="line"></span><br><span class="line">  cout&lt;&lt;tg&lt;&lt;dz;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="10-答疑"><a href="#10-答疑" class="headerlink" title="10 答疑"></a>10 答疑</h1><p>解题日期：250205<br>解题用时：230min<br>题目来源：蓝桥杯真题<br>题目难度：中等<br>题目标签：2020，贪心，国赛</p><h4 id="题意整理-8"><a href="#题意整理-8" class="headerlink" title="题意整理"></a>题意整理</h4><p>![[Pasted image 20250205203805.png]]</p><h4 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h4><p><strong>同学消耗的总时间越短，优先级越高</strong><br><strong>总时间相等时，优先级相同，无所谓前后</strong><br><strong>证明：</strong><br>假设同学 i 进入办公室的时间于解答时间的和为 Ai , 离开办公室的时间为 Bi<br>对于同学 1 与同学 2 而言，所用时间为：<br>A1, B1<br>A2, B2<br>若同学 1 先进教室，则答案为 ans1 &#x3D; (A1) + (A1 + B1 + A2)<br>若同学 2 先进教室，则答案为 ans2 &#x3D; (A2) + (A2 + B2 + A1)<br>可以发现 ans1 与 ans2 的关系等同于 (A1 + B1) 与 (A2 + B2) 的关系<br>所以：每名同学进入教室的优先级只与其所消耗的时间和有关，和越小，优先级越高</p><p>假如 (A1 + B1) &#x3D;&#x3D; (A2 + B2)<br>此时有同学 3 所用时间为：A3, B3 且 (A3 + B3) &gt; (A2 + B2)<br>那么同学 3 发消息的时刻为 (A1 + B1 + A2 + B2 + A3)<br>可知，同学 1 与同学 2 的顺序不会影响答案</p><h4 id="AC代码-7"><a href="#AC代码-7" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Num</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> s;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> a;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> e;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于排序的比较函数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> Num&amp; x, <span class="type">const</span> Num&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.sum &lt; y.sum;  <span class="comment">// 按照 sum 从小到大排序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);  <span class="comment">// 优化 I/O</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    Num num[<span class="number">1010</span>];  <span class="comment">// 使用结构体数组</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输入数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; num[i].s &gt;&gt; num[i].a &gt;&gt; num[i].e;</span><br><span class="line">        num[i].sum = num[i].s + num[i].a + num[i].e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按照 sum 从小到大排序</span></span><br><span class="line">    <span class="built_in">sort</span>(num, num + n, compare);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算结果</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        res+=num[i].a+num[i].s;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">      k+=num[i].sum;</span><br><span class="line">      res+=k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理最后一个元素</span></span><br><span class="line">    res += num[n - <span class="number">1</span>].sum - num[n - <span class="number">1</span>].e;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024-02-12-部署到远程服务器的烦恼</title>
      <link href="/2025/02/12/2024-02-12-%E9%83%A8%E7%BD%B2%E5%88%B0%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E7%83%A6%E6%81%BC/"/>
      <url>/2025/02/12/2024-02-12-%E9%83%A8%E7%BD%B2%E5%88%B0%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E7%83%A6%E6%81%BC/</url>
      
        <content type="html"><![CDATA[<p>正在疯狂想要一个既有GitHub，又可以方便的本地同步，还可以用上我的云服务器的方法。<br>虽然说是静态网站不那么苛求同步的速度，但是每一次要手动重复自己之前的操作还是有点伤脑筋的。那些优秀的程序员们想必是不会采用这么低效的方法的。<br>这个博客网站还有很多很多需要优化和更改的地方，也有很多我想要实现的功能。希望可以把这里当作我独特的世界，我独特的小家。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Secret</title>
      <link href="/2025/02/12/mimi/"/>
      <url>/2025/02/12/mimi/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="01e192f402e314ecb1de803165cc713598c352b89393f2fc7c50b59d2f7f875d">8857952509ef9895f61625fe2d594ef3b689d4518c7f9cb35f7afd2913fbf3135cb397e4278f78af41d0362fe90210362e40b8e0bb3223f1a720a05917decb6ae58ec7b7be0e926b80a38237fe9ab9a5986411d93499e556d47a0f7ac91504e0fdacce4226b7a89bceededd3d89bf612203e35de90b124958a74b27366d8d696b2541c9ba4458245ab6fc80007d06602a55017687e326f21416d3e9623901979f49c0988cdaa43e250c2d80d6e8e54604327dd9df7e1dee6ff6714484ff33cc4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 作为日记加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2025/02/12/2025-02-12-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2025/02/12/2025-02-12-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第一篇文章"><a href="#这是我的第一篇文章" class="headerlink" title="这是我的第一篇文章"></a>这是我的第一篇文章</h2><p>很高兴拥有自己的个人博客！假期的时间果然是宝贵的，从上周日开始筹备，经过反复试错摸索了三天才出头！<br>希望这次一定要成功！<br>开个好头！<br>域名和SSL证书以及服务器都已经准备好了！<br>投资的金额不是很多，以后有闲钱会加大投入开发更多功能的！</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
